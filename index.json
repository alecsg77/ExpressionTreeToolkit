{
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Expression Tree Toolkit Documentation",
    "keywords": "This is the HOMEPAGE . Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | Expression Tree Toolkit Documentation",
    "keywords": "Add your introductions here!"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | Expression Tree Toolkit Documentation",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "api/ExpressionTreeToolkit.html": {
    "href": "api/ExpressionTreeToolkit.html",
    "title": "Namespace ExpressionTreeToolkit | Expression Tree Toolkit Documentation",
    "keywords": "Namespace ExpressionTreeToolkit Classes ExpressionEqualityComparer Expression Equality Comparer"
  },
  "api/ExpressionTreeToolkit.ExpressionEqualityComparer.html": {
    "href": "api/ExpressionTreeToolkit.ExpressionEqualityComparer.html",
    "title": "Class ExpressionEqualityComparer | Expression Tree Toolkit Documentation",
    "keywords": "Class ExpressionEqualityComparer Expression Equality Comparer Inheritance Object ExpressionEqualityComparer Implements IEqualityComparer < BinaryExpression > IEqualityComparer < BlockExpression > IEqualityComparer < ConditionalExpression > IEqualityComparer < ConstantExpression > IEqualityComparer < Expression > IEqualityComparer IEqualityComparer < DebugInfoExpression > IEqualityComparer < DefaultExpression > IEqualityComparer < DynamicExpression > IEqualityComparer < GotoExpression > IEqualityComparer < IndexExpression > IEqualityComparer < InvocationExpression > IEqualityComparer < LabelExpression > IEqualityComparer < LambdaExpression > IEqualityComparer < ListInitExpression > IEqualityComparer < LoopExpression > IEqualityComparer < MemberExpression > IEqualityComparer < MemberInitExpression > IEqualityComparer < MethodCallExpression > IEqualityComparer < NewExpression > IEqualityComparer < NewArrayExpression > IEqualityComparer < ParameterExpression > IEqualityComparer < RuntimeVariablesExpression > IEqualityComparer < SwitchExpression > IEqualityComparer < TryExpression > IEqualityComparer < TypeBinaryExpression > IEqualityComparer < UnaryExpression > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ExpressionTreeToolkit Assembly : ExpressionTreeToolkit.Core.dll Syntax public class ExpressionEqualityComparer : IEqualityComparer<BinaryExpression>, IEqualityComparer<BlockExpression>, IEqualityComparer<ConditionalExpression>, IEqualityComparer<ConstantExpression>, IEqualityComparer<Expression>, IEqualityComparer, IEqualityComparer<DebugInfoExpression>, IEqualityComparer<DefaultExpression>, IEqualityComparer<DynamicExpression>, IEqualityComparer<GotoExpression>, IEqualityComparer<IndexExpression>, IEqualityComparer<InvocationExpression>, IEqualityComparer<LabelExpression>, IEqualityComparer<LambdaExpression>, IEqualityComparer<ListInitExpression>, IEqualityComparer<LoopExpression>, IEqualityComparer<MemberExpression>, IEqualityComparer<MemberInitExpression>, IEqualityComparer<MethodCallExpression>, IEqualityComparer<NewExpression>, IEqualityComparer<NewArrayExpression>, IEqualityComparer<ParameterExpression>, IEqualityComparer<RuntimeVariablesExpression>, IEqualityComparer<SwitchExpression>, IEqualityComparer<TryExpression>, IEqualityComparer<TypeBinaryExpression>, IEqualityComparer<UnaryExpression> Constructors | Improve this Doc View Source ExpressionEqualityComparer() Initializes a new instance of the ExpressionEqualityComparer class. Declaration public ExpressionEqualityComparer() | Improve this Doc View Source ExpressionEqualityComparer(IEqualityComparer<Expression>) Initializes a new instance of the ExpressionEqualityComparer class and uses the specified equality comparer for the unknown Expression node. Declaration public ExpressionEqualityComparer([CanBeNull] IEqualityComparer<Expression> equalityComparer) Parameters Type Name Description IEqualityComparer < Expression > equalityComparer The EqualityComparer for comparing unknown Expression node in the Expression tree, or null to use the default EqualityComparer implementation. Fields | Improve this Doc View Source Default Returns a default Expression equality comparer. Declaration public static readonly ExpressionEqualityComparer Default Field Value Type Description ExpressionEqualityComparer Methods | Improve this Doc View Source Equals(ReadOnlyCollection<Expression>, ReadOnlyCollection<Expression>) Determines whether two collections are equal by comparing the nodes. Declaration protected bool Equals([CanBeNull, ItemCanBeNull] ReadOnlyCollection<Expression> first, [CanBeNull, ItemCanBeNull] ReadOnlyCollection<Expression> second) Parameters Type Name Description ReadOnlyCollection < Expression > first A collection of Expression to compare. ReadOnlyCollection < Expression > second A collection of Expression to compare to the first sequence. Returns Type Description Boolean true if the two nodes sequences are of equal length and their corresponding elements are equal; otherwise, false. | Improve this Doc View Source Equals(Expression, Expression) Determines whether two Expressions are equal. Declaration public virtual bool Equals([CanBeNull] Expression x, [CanBeNull] Expression y) Parameters Type Name Description Expression x The first Expression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expressions are equal; otherwise, false. | Improve this Doc View Source Equals<T>(ReadOnlyCollection<T>, ReadOnlyCollection<T>) Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type. Declaration protected bool Equals<T>([CanBeNull, ItemCanBeNull] ReadOnlyCollection<T> first, [CanBeNull, ItemCanBeNull] ReadOnlyCollection<T> second) Parameters Type Name Description ReadOnlyCollection <T> first An ReadOnlyCollection<T> to compare to second. ReadOnlyCollection <T> second An ReadOnlyCollection<T> to compare to the first sequence. Returns Type Description Boolean true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false. Type Parameters Name Description T The type of the elements of the input sequences. | Improve this Doc View Source Equals<T>(ReadOnlyCollection<T>, ReadOnlyCollection<T>, Func<T, T, Boolean>) Determines whether two sequences are equal by comparing their elements by using a specified System.Func{T,T,bool} . Declaration protected bool Equals<T>([CanBeNull, ItemCanBeNull] ReadOnlyCollection<T> first, [CanBeNull, ItemCanBeNull] ReadOnlyCollection<T> second, [CanBeNull] Func<T, T, bool> equalityComparer) where T : class Parameters Type Name Description ReadOnlyCollection <T> first An ReadOnlyCollection<T> to compare to second. ReadOnlyCollection <T> second An ReadOnlyCollection<T> to compare to the first sequence. Func <T, T, Boolean > equalityComparer An System.Func{T,T,bool} to use to compare elements. Returns Type Description Boolean true if the two source sequences are of equal length and their corresponding elements compare equal according to equalityComparer ; otherwise, false. Type Parameters Name Description T The type of the elements of the input sequences. | Improve this Doc View Source EqualsBinary(BinaryExpression, BinaryExpression) Determines whether the children of the two BinaryExpression are equal. Declaration protected virtual bool EqualsBinary([NotNull] BinaryExpression x, [NotNull] BinaryExpression y) Parameters Type Name Description BinaryExpression x The first BinaryExpression to compare. BinaryExpression y The second BinaryExpression to compare. Returns Type Description Boolean true if the specified BinaryExpression are equal; otherwise, false. | Improve this Doc View Source EqualsBlock(BlockExpression, BlockExpression) Determines whether the children of the two BlockExpression are equal. Declaration protected virtual bool EqualsBlock([NotNull] BlockExpression x, [NotNull] BlockExpression y) Parameters Type Name Description BlockExpression x The first BlockExpression to compare. BlockExpression y The second BlockExpression to compare. Returns Type Description Boolean true if the specified BlockExpression are equal; otherwise, false. | Improve this Doc View Source EqualsCatchBlock(CatchBlock, CatchBlock) Determines whether the children of the two CatchBlock are equal. Declaration protected virtual bool EqualsCatchBlock([NotNull] CatchBlock x, [NotNull] CatchBlock y) Parameters Type Name Description CatchBlock x The first CatchBlock to compare. CatchBlock y The second CatchBlock to compare. Returns Type Description Boolean true if the specified CatchBlock are equal; otherwise, false. | Improve this Doc View Source EqualsConditional(ConditionalExpression, ConditionalExpression) Determines whether the children of the two ConditionalExpression are equal. Declaration protected virtual bool EqualsConditional([NotNull] ConditionalExpression x, [NotNull] ConditionalExpression y) Parameters Type Name Description ConditionalExpression x The first ConditionalExpression to compare. ConditionalExpression y The second ConditionalExpression to compare. Returns Type Description Boolean true if the specified ConditionalExpression are equal; otherwise, false. | Improve this Doc View Source EqualsConstant(ConstantExpression, ConstantExpression) Determines whether the children of the two ConstantExpression are equal. Declaration protected virtual bool EqualsConstant([NotNull] ConstantExpression x, [NotNull] ConstantExpression y) Parameters Type Name Description ConstantExpression x The first ConstantExpression to compare. ConstantExpression y The second ConstantExpression to compare. Returns Type Description Boolean true if the specified ConstantExpression are equal; otherwise, false. | Improve this Doc View Source EqualsDebugInfo(DebugInfoExpression, DebugInfoExpression) Determines whether the children of the two DebugInfoExpression are equal. Declaration protected virtual bool EqualsDebugInfo([NotNull] DebugInfoExpression x, [NotNull] DebugInfoExpression y) Parameters Type Name Description DebugInfoExpression x The first DebugInfoExpression to compare. DebugInfoExpression y The second DebugInfoExpression to compare. Returns Type Description Boolean true if the specified DebugInfoExpression are equal; otherwise, false. | Improve this Doc View Source EqualsDefault(DefaultExpression, DefaultExpression) Determines whether the children of the two DefaultExpression are equal. Declaration protected virtual bool EqualsDefault([NotNull] DefaultExpression x, [NotNull] DefaultExpression y) Parameters Type Name Description DefaultExpression x The first DefaultExpression to compare. DefaultExpression y The second DefaultExpression to compare. Returns Type Description Boolean true if the specified DefaultExpression are equal; otherwise, false. | Improve this Doc View Source EqualsDynamic(DynamicExpression, DynamicExpression) Determines whether the children of the two DynamicExpression are equal. Declaration protected virtual bool EqualsDynamic([NotNull] DynamicExpression x, [NotNull] DynamicExpression y) Parameters Type Name Description DynamicExpression x The first DynamicExpression to compare. DynamicExpression y The second DynamicExpression to compare. Returns Type Description Boolean true if the specified DynamicExpression are equal; otherwise, false. | Improve this Doc View Source EqualsElementInit(ElementInit, ElementInit) Determines whether the children of the two ElementInit are equal. Declaration protected virtual bool EqualsElementInit([CanBeNull] ElementInit x, [CanBeNull] ElementInit y) Parameters Type Name Description ElementInit x The first ElementInit to compare. ElementInit y The second ElementInit to compare. Returns Type Description Boolean true if the specified ElementInit are equal; otherwise, false. | Improve this Doc View Source EqualsExtension(Expression, Expression) Determines whether the children of the two extension Expression are equal. Declaration protected virtual bool EqualsExtension([NotNull] Expression x, [NotNull] Expression y) Parameters Type Name Description Expression x The first extension Expression to compare. Expression y The second extension Expression to compare. Returns Type Description Boolean true if the specified extension Expression are equal; otherwise, false. | Improve this Doc View Source EqualsGoto(GotoExpression, GotoExpression) Determines whether the children of the two GotoExpression are equal. Declaration protected virtual bool EqualsGoto([NotNull] GotoExpression x, [NotNull] GotoExpression y) Parameters Type Name Description GotoExpression x The first GotoExpression to compare. GotoExpression y The second GotoExpression to compare. Returns Type Description Boolean true if the specified GotoExpression are equal; otherwise, false. | Improve this Doc View Source EqualsIndex(IndexExpression, IndexExpression) Determines whether the children of the two IndexExpression are equal. Declaration protected virtual bool EqualsIndex([NotNull] IndexExpression x, [NotNull] IndexExpression y) Parameters Type Name Description IndexExpression x The first IndexExpression to compare. IndexExpression y The second IndexExpression to compare. Returns Type Description Boolean true if the specified IndexExpression are equal; otherwise, false. | Improve this Doc View Source EqualsInvocation(InvocationExpression, InvocationExpression) Determines whether the children of the two InvocationExpression are equal. Declaration protected virtual bool EqualsInvocation([NotNull] InvocationExpression x, [NotNull] InvocationExpression y) Parameters Type Name Description InvocationExpression x The first InvocationExpression to compare. InvocationExpression y The second InvocationExpression to compare. Returns Type Description Boolean true if the specified InvocationExpression are equal; otherwise, false. | Improve this Doc View Source EqualsLabel(LabelExpression, LabelExpression) Determines whether the children of the two LabelExpression are equal. Declaration protected virtual bool EqualsLabel([NotNull] LabelExpression x, [NotNull] LabelExpression y) Parameters Type Name Description LabelExpression x The first LabelExpression to compare. LabelExpression y The second LabelExpression to compare. Returns Type Description Boolean true if the specified LabelExpression are equal; otherwise, false. | Improve this Doc View Source EqualsLabelTarget(LabelTarget, LabelTarget) Determines whether the children of the two LabelTarget are equal. Declaration protected virtual bool EqualsLabelTarget([CanBeNull] LabelTarget x, [CanBeNull] LabelTarget y) Parameters Type Name Description LabelTarget x The first LabelTarget to compare. LabelTarget y The second LabelTarget to compare. Returns Type Description Boolean true if the specified LabelTarget are equal; otherwise, false. | Improve this Doc View Source EqualsLambda(LambdaExpression, LambdaExpression) Determines whether the children of the two LambdaExpression are equal. Declaration protected virtual bool EqualsLambda([NotNull] LambdaExpression x, LambdaExpression y) Parameters Type Name Description LambdaExpression x The first LambdaExpression to compare. LambdaExpression y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression are equal; otherwise, false. | Improve this Doc View Source EqualsListInit(ListInitExpression, ListInitExpression) Determines whether the children of the two ListInitExpression are equal. Declaration protected virtual bool EqualsListInit([NotNull] ListInitExpression x, [NotNull] ListInitExpression y) Parameters Type Name Description ListInitExpression x The first ListInitExpression to compare. ListInitExpression y The second ListInitExpression to compare. Returns Type Description Boolean true if the specified ListInitExpression are equal; otherwise, false. | Improve this Doc View Source EqualsLoop(LoopExpression, LoopExpression) Determines whether the children of the two LoopExpression are equal. Declaration protected virtual bool EqualsLoop([NotNull] LoopExpression x, [NotNull] LoopExpression y) Parameters Type Name Description LoopExpression x The first LoopExpression to compare. LoopExpression y The second LoopExpression to compare. Returns Type Description Boolean true if the specified LoopExpression are equal; otherwise, false. | Improve this Doc View Source EqualsMember(MemberExpression, MemberExpression) Determines whether the children of the two MemberExpression are equal. Declaration protected virtual bool EqualsMember([NotNull] MemberExpression x, [NotNull] MemberExpression y) Parameters Type Name Description MemberExpression x The first MemberExpression to compare. MemberExpression y The second MemberExpression to compare. Returns Type Description Boolean true if the specified MemberExpression are equal; otherwise, false. | Improve this Doc View Source EqualsMemberAssignment(MemberAssignment, MemberAssignment) Determines whether the children of the two MemberAssignment are equal. Declaration protected virtual bool EqualsMemberAssignment([NotNull] MemberAssignment x, [NotNull] MemberAssignment y) Parameters Type Name Description MemberAssignment x The first MemberAssignment to compare. MemberAssignment y The second MemberAssignment to compare. Returns Type Description Boolean true if the specified MemberAssignment are equal; otherwise, false. | Improve this Doc View Source EqualsMemberBinding(MemberBinding, MemberBinding) Determines whether the children of the two MemberBinding are equal. Declaration protected virtual bool EqualsMemberBinding([CanBeNull] MemberBinding x, [CanBeNull] MemberBinding y) Parameters Type Name Description MemberBinding x The first MemberBinding to compare. MemberBinding y The second MemberBinding to compare. Returns Type Description Boolean true if the specified MemberBinding are equal; otherwise, false. | Improve this Doc View Source EqualsMemberInit(MemberInitExpression, MemberInitExpression) Determines whether the children of the two MemberInitExpression are equal. Declaration protected virtual bool EqualsMemberInit([NotNull] MemberInitExpression x, [NotNull] MemberInitExpression y) Parameters Type Name Description MemberInitExpression x The first MemberInitExpression to compare. MemberInitExpression y The second MemberInitExpression to compare. Returns Type Description Boolean true if the specified MemberInitExpression are equal; otherwise, false. | Improve this Doc View Source EqualsMemberListBinding(MemberListBinding, MemberListBinding) Determines whether the children of the two MemberListBinding are equal. Declaration protected virtual bool EqualsMemberListBinding([NotNull] MemberListBinding x, [NotNull] MemberListBinding y) Parameters Type Name Description MemberListBinding x The first MemberListBinding to compare. MemberListBinding y The second MemberListBinding to compare. Returns Type Description Boolean true if the specified MemberListBinding are equal; otherwise, false. | Improve this Doc View Source EqualsMemberMemberBinding(MemberMemberBinding, MemberMemberBinding) Determines whether the children of the two MemberMemberBinding are equal. Declaration protected virtual bool EqualsMemberMemberBinding([NotNull] MemberMemberBinding x, [NotNull] MemberMemberBinding y) Parameters Type Name Description MemberMemberBinding x The first MemberMemberBinding to compare. MemberMemberBinding y The second MemberMemberBinding to compare. Returns Type Description Boolean true if the specified MemberMemberBinding are equal; otherwise, false. | Improve this Doc View Source EqualsMethodCall(MethodCallExpression, MethodCallExpression) Determines whether the children of the two MethodCallExpression are equal. Declaration protected virtual bool EqualsMethodCall([NotNull] MethodCallExpression x, [NotNull] MethodCallExpression y) Parameters Type Name Description MethodCallExpression x The first MethodCallExpression to compare. MethodCallExpression y The second MethodCallExpression to compare. Returns Type Description Boolean true if the specified MethodCallExpression are equal; otherwise, false. | Improve this Doc View Source EqualsNew(NewExpression, NewExpression) Determines whether the children of the two NewExpression are equal. Declaration protected virtual bool EqualsNew([NotNull] NewExpression x, [NotNull] NewExpression y) Parameters Type Name Description NewExpression x The first NewExpression to compare. NewExpression y The second NewExpression to compare. Returns Type Description Boolean true if the specified NewExpression are equal; otherwise, false. | Improve this Doc View Source EqualsNewArray(NewArrayExpression, NewArrayExpression) Determines whether the children of the two NewArrayExpression are equal. Declaration protected virtual bool EqualsNewArray([NotNull] NewArrayExpression x, [NotNull] NewArrayExpression y) Parameters Type Name Description NewArrayExpression x The first NewArrayExpression to compare. NewArrayExpression y The second NewArrayExpression to compare. Returns Type Description Boolean true if the specified NewArrayExpression are equal; otherwise, false. | Improve this Doc View Source EqualsParameter(ParameterExpression, ParameterExpression) Determines whether the children of the two ParameterExpression are equal. Declaration protected virtual bool EqualsParameter([NotNull] ParameterExpression x, [NotNull] ParameterExpression y) Parameters Type Name Description ParameterExpression x The first ParameterExpression to compare. ParameterExpression y The second ParameterExpression to compare. Returns Type Description Boolean true if the specified ParameterExpression are equal; otherwise, false. | Improve this Doc View Source EqualsRuntimeVariables(RuntimeVariablesExpression, RuntimeVariablesExpression) Determines whether the children of the two RuntimeVariablesExpression are equal. Declaration protected virtual bool EqualsRuntimeVariables([NotNull] RuntimeVariablesExpression x, [NotNull] RuntimeVariablesExpression y) Parameters Type Name Description RuntimeVariablesExpression x The first RuntimeVariablesExpression to compare. RuntimeVariablesExpression y The second RuntimeVariablesExpression to compare. Returns Type Description Boolean true if the specified RuntimeVariablesExpression are equal; otherwise, false. | Improve this Doc View Source EqualsSwitch(SwitchExpression, SwitchExpression) Determines whether the children of the two SwitchExpression are equal. Declaration protected virtual bool EqualsSwitch([NotNull] SwitchExpression x, [NotNull] SwitchExpression y) Parameters Type Name Description SwitchExpression x The first SwitchExpression to compare. SwitchExpression y The second SwitchExpression to compare. Returns Type Description Boolean true if the specified SwitchExpression are equal; otherwise, false. | Improve this Doc View Source EqualsSwitchCase(SwitchCase, SwitchCase) Determines whether the children of the two SwitchCase are equal. Declaration protected virtual bool EqualsSwitchCase([NotNull] SwitchCase x, [NotNull] SwitchCase y) Parameters Type Name Description SwitchCase x The first SwitchCase to compare. SwitchCase y The second SwitchCase to compare. Returns Type Description Boolean true if the specified SwitchCase are equal; otherwise, false. | Improve this Doc View Source EqualsTry(TryExpression, TryExpression) Determines whether the children of the two TryExpression are equal. Declaration protected virtual bool EqualsTry([NotNull] TryExpression x, [NotNull] TryExpression y) Parameters Type Name Description TryExpression x The first TryExpression to compare. TryExpression y The second TryExpression to compare. Returns Type Description Boolean true if the specified TryExpression are equal; otherwise, false. | Improve this Doc View Source EqualsTypeBinary(TypeBinaryExpression, TypeBinaryExpression) Determines whether the children of the two TypeBinaryExpression are equal. Declaration protected virtual bool EqualsTypeBinary([NotNull] TypeBinaryExpression x, [NotNull] TypeBinaryExpression y) Parameters Type Name Description TypeBinaryExpression x The first TypeBinaryExpression to compare. TypeBinaryExpression y The second TypeBinaryExpression to compare. Returns Type Description Boolean true if the specified TypeBinaryExpression are equal; otherwise, false. | Improve this Doc View Source EqualsUnary(UnaryExpression, UnaryExpression) Determines whether the children of the two UnaryExpression are equal. Declaration protected virtual bool EqualsUnary([NotNull] UnaryExpression x, [NotNull] UnaryExpression y) Parameters Type Name Description UnaryExpression x The first UnaryExpression to compare. UnaryExpression y The second UnaryExpression to compare. Returns Type Description Boolean true if the specified UnaryExpression are equal; otherwise, false. | Improve this Doc View Source GetHashCode(ReadOnlyCollection<Expression>) Computes the hash of a sequence of Expression nodes. Declaration protected int GetHashCode([CanBeNull, ItemCanBeNull] ReadOnlyCollection<Expression> nodes) Parameters Type Name Description ReadOnlyCollection < Expression > nodes A sequence of Expression nodes to calculate the hash of. Returns Type Description Int32 The hash of the sequence of nodes. | Improve this Doc View Source GetHashCode(Expression) Serves as a hash function for the specified Expression for hashing algorithms and data structures, such as a hash table. Declaration public virtual int GetHashCode([CanBeNull] Expression expression) Parameters Type Name Description Expression expression The Expression for which to get a hash code. Returns Type Description Int32 A hash code for the specified Expression. | Improve this Doc View Source GetHashCode<T>(ReadOnlyCollection<T>) Computes the hash of a sequence of values by using the default equality comparer for their type. Declaration protected int GetHashCode<T>([CanBeNull, ItemCanBeNull] ReadOnlyCollection<T> values) Parameters Type Name Description ReadOnlyCollection <T> values A sequence of values to calculate the hash of. Returns Type Description Int32 The hash of the sequence of values. Type Parameters Name Description T The type of the elements of values. | Improve this Doc View Source GetHashCode<T>(ReadOnlyCollection<T>, Func<T, Int32>) Computes the hash of a sequence of values by using a specified System.Func{T,int} . Declaration protected int GetHashCode<T>([ItemCanBeNull, CanBeNull] ReadOnlyCollection<T> values, [CanBeNull] Func<T, int> getHashCode) where T : class Parameters Type Name Description ReadOnlyCollection <T> values A sequence of values to calculate the hash of. Func <T, Int32 > getHashCode An System.Func{T,int} to use to computes the hash of elements. Returns Type Description Int32 The hash of the sequence of values. Type Parameters Name Description T The type of the elements of values. | Improve this Doc View Source GetHashCodeBinary(BinaryExpression) Gets the hash code for the specified BinaryExpression. Declaration protected virtual int GetHashCodeBinary([NotNull] BinaryExpression node) Parameters Type Name Description BinaryExpression node The BinaryExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified BinaryExpression. | Improve this Doc View Source GetHashCodeBlock(BlockExpression) Gets the hash code for the specified BlockExpression. Declaration protected virtual int GetHashCodeBlock([NotNull] BlockExpression node) Parameters Type Name Description BlockExpression node The BlockExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified BlockExpression. | Improve this Doc View Source GetHashCodeCatchBlock(CatchBlock) Gets the hash code for the specified CatchBlock. Declaration protected virtual int GetHashCodeCatchBlock([NotNull] CatchBlock catchBlock) Parameters Type Name Description CatchBlock catchBlock The CatchBlock for which to get a hash code. Returns Type Description Int32 A hash code for the specified CatchBlock. | Improve this Doc View Source GetHashCodeConditional(ConditionalExpression) Gets the hash code for the specified ConditionalExpression. Declaration protected virtual int GetHashCodeConditional([NotNull] ConditionalExpression node) Parameters Type Name Description ConditionalExpression node The ConditionalExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified ConditionalExpression. | Improve this Doc View Source GetHashCodeConstant(ConstantExpression) Gets the hash code for the specified ConstantExpression. Declaration protected virtual int GetHashCodeConstant([NotNull] ConstantExpression node) Parameters Type Name Description ConstantExpression node The ConstantExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified ConstantExpression. | Improve this Doc View Source GetHashCodeDebugInfo(DebugInfoExpression) Gets the hash code for the specified DebugInfoExpression. Declaration protected virtual int GetHashCodeDebugInfo([NotNull] DebugInfoExpression node) Parameters Type Name Description DebugInfoExpression node The DebugInfoExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified DebugInfoExpression. | Improve this Doc View Source GetHashCodeDefault(DefaultExpression) Gets the hash code for the specified DefaultExpression. Declaration protected virtual int GetHashCodeDefault([NotNull] DefaultExpression node) Parameters Type Name Description DefaultExpression node The DefaultExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified DefaultExpression. | Improve this Doc View Source GetHashCodeDynamic(DynamicExpression) Gets the hash code for the specified DynamicExpression. Declaration protected virtual int GetHashCodeDynamic([NotNull] DynamicExpression node) Parameters Type Name Description DynamicExpression node The DynamicExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified DynamicExpression. | Improve this Doc View Source GetHashCodeElementInit(ElementInit) Gets the hash code for the specified ElementInit. Declaration protected virtual int GetHashCodeElementInit([CanBeNull] ElementInit elementInit) Parameters Type Name Description ElementInit elementInit The ElementInit for which to get a hash code. Returns Type Description Int32 A hash code for the specified ElementInit. | Improve this Doc View Source GetHashCodeExtension(Expression) Gets the hash code for the specified extension Expression. Declaration protected virtual int GetHashCodeExtension([NotNull] Expression obj) Parameters Type Name Description Expression obj Returns Type Description Int32 A hash code for the specified extension Expression. | Improve this Doc View Source GetHashCodeGoto(GotoExpression) Gets the hash code for the specified GotoExpression. Declaration protected virtual int GetHashCodeGoto([NotNull] GotoExpression node) Parameters Type Name Description GotoExpression node The GotoExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified GotoExpression. | Improve this Doc View Source GetHashCodeIndex(IndexExpression) Gets the hash code for the specified IndexExpression. Declaration protected virtual int GetHashCodeIndex([NotNull] IndexExpression node) Parameters Type Name Description IndexExpression node The IndexExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified IndexExpression. | Improve this Doc View Source GetHashCodeInvocation(InvocationExpression) Gets the hash code for the specified InvocationExpression. Declaration protected virtual int GetHashCodeInvocation([NotNull] InvocationExpression node) Parameters Type Name Description InvocationExpression node The InvocationExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified InvocationExpression. | Improve this Doc View Source GetHashCodeLabel(LabelExpression) Gets the hash code for the specified LabelExpression. Declaration protected virtual int GetHashCodeLabel([NotNull] LabelExpression node) Parameters Type Name Description LabelExpression node The LabelExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LabelExpression. | Improve this Doc View Source GetHashCodeLabelTarget(LabelTarget) Gets the hash code for the specified LabelTarget. Declaration protected virtual int GetHashCodeLabelTarget([CanBeNull] LabelTarget labelTarget) Parameters Type Name Description LabelTarget labelTarget The LabelTarget for which to get a hash code. Returns Type Description Int32 A hash code for the specified LabelTarget. | Improve this Doc View Source GetHashCodeLambda(LambdaExpression) Gets the hash code for the specified LambdaExpression. Declaration protected virtual int GetHashCodeLambda([NotNull] LambdaExpression node) Parameters Type Name Description LambdaExpression node The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression. | Improve this Doc View Source GetHashCodeListInit(ListInitExpression) Gets the hash code for the specified ListInitExpression. Declaration protected virtual int GetHashCodeListInit([NotNull] ListInitExpression node) Parameters Type Name Description ListInitExpression node The ListInitExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified ListInitExpression. | Improve this Doc View Source GetHashCodeLoop(LoopExpression) Gets the hash code for the specified LoopExpression. Declaration protected virtual int GetHashCodeLoop([NotNull] LoopExpression node) Parameters Type Name Description LoopExpression node The LoopExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LoopExpression. | Improve this Doc View Source GetHashCodeMember(MemberExpression) Gets the hash code for the specified MemberExpression. Declaration protected virtual int GetHashCodeMember([NotNull] MemberExpression node) Parameters Type Name Description MemberExpression node The MemberExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified MemberExpression. | Improve this Doc View Source GetHashCodeMemberAssignment(MemberAssignment) Gets the hash code for the specified MemberAssignment. Declaration protected virtual int GetHashCodeMemberAssignment([NotNull] MemberAssignment memberAssignment) Parameters Type Name Description MemberAssignment memberAssignment The MemberAssignment for which to get a hash code. Returns Type Description Int32 A hash code for the specified MemberAssignment. | Improve this Doc View Source GetHashCodeMemberBinding(MemberBinding) Gets the hash code for the specified MemberBinding. Declaration protected virtual int GetHashCodeMemberBinding([CanBeNull] MemberBinding memberBinding) Parameters Type Name Description MemberBinding memberBinding The MemberBinding for which to get a hash code. Returns Type Description Int32 A hash code for the specified MemberBinding. | Improve this Doc View Source GetHashCodeMemberInit(MemberInitExpression) Gets the hash code for the specified MemberInitExpression. Declaration protected virtual int GetHashCodeMemberInit([NotNull] MemberInitExpression node) Parameters Type Name Description MemberInitExpression node The MemberInitExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified MemberInitExpression. | Improve this Doc View Source GetHashCodeMemberListBinding(MemberListBinding) Gets the hash code for the specified MemberListBinding. Declaration protected virtual int GetHashCodeMemberListBinding([NotNull] MemberListBinding memberListBinding) Parameters Type Name Description MemberListBinding memberListBinding The MemberListBinding for which to get a hash code. Returns Type Description Int32 A hash code for the specified MemberListBinding. | Improve this Doc View Source GetHashCodeMemberMemberBinding(MemberMemberBinding) Gets the hash code for the specified MemberMemberBinding. Declaration protected virtual int GetHashCodeMemberMemberBinding([NotNull] MemberMemberBinding memberMemberBinding) Parameters Type Name Description MemberMemberBinding memberMemberBinding The MemberMemberBinding for which to get a hash code. Returns Type Description Int32 A hash code for the specified MemberMemberBinding. | Improve this Doc View Source GetHashCodeMethodCall(MethodCallExpression) Gets the hash code for the specified MethodCallExpression. Declaration protected virtual int GetHashCodeMethodCall([NotNull] MethodCallExpression node) Parameters Type Name Description MethodCallExpression node The MethodCallExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified MethodCallExpression. | Improve this Doc View Source GetHashCodeNew(NewExpression) Gets the hash code for the specified NewExpression. Declaration protected virtual int GetHashCodeNew([NotNull] NewExpression node) Parameters Type Name Description NewExpression node The NewExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified NewExpression. | Improve this Doc View Source GetHashCodeNewArray(NewArrayExpression) Gets the hash code for the specified NewArrayExpression. Declaration protected virtual int GetHashCodeNewArray([NotNull] NewArrayExpression node) Parameters Type Name Description NewArrayExpression node The NewArrayExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified NewArrayExpression. | Improve this Doc View Source GetHashCodeParameter(ParameterExpression) Gets the hash code for the specified ParameterExpression. Declaration protected virtual int GetHashCodeParameter([NotNull] ParameterExpression node) Parameters Type Name Description ParameterExpression node The ParameterExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified ParameterExpression. | Improve this Doc View Source GetHashCodeRuntimeVariables(RuntimeVariablesExpression) Gets the hash code for the specified RuntimeVariablesExpression. Declaration protected virtual int GetHashCodeRuntimeVariables([NotNull] RuntimeVariablesExpression node) Parameters Type Name Description RuntimeVariablesExpression node The RuntimeVariablesExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified RuntimeVariablesExpression. | Improve this Doc View Source GetHashCodeSwitch(SwitchExpression) Gets the hash code for the specified SwitchExpression. Declaration protected virtual int GetHashCodeSwitch([NotNull] SwitchExpression node) Parameters Type Name Description SwitchExpression node The SwitchExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified SwitchExpression. | Improve this Doc View Source GetHashCodeSwitchCase(SwitchCase) Gets the hash code for the specified SwitchCase. Declaration protected virtual int GetHashCodeSwitchCase([NotNull] SwitchCase switchCase) Parameters Type Name Description SwitchCase switchCase The SwitchCase for which to get a hash code. Returns Type Description Int32 A hash code for the specified SwitchCase. | Improve this Doc View Source GetHashCodeTry(TryExpression) Gets the hash code for the specified TryExpression. Declaration protected virtual int GetHashCodeTry([NotNull] TryExpression node) Parameters Type Name Description TryExpression node The TryExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified TryExpression. | Improve this Doc View Source GetHashCodeTypeBinary(TypeBinaryExpression) Gets the hash code for the specified TypeBinaryExpression. Declaration protected virtual int GetHashCodeTypeBinary([NotNull] TypeBinaryExpression node) Parameters Type Name Description TypeBinaryExpression node The TypeBinaryExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified TypeBinaryExpression. | Improve this Doc View Source GetHashCodeUnary(UnaryExpression) Gets the hash code for the specified UnaryExpression. Declaration protected virtual int GetHashCodeUnary([NotNull] UnaryExpression node) Parameters Type Name Description UnaryExpression node The UnaryExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified UnaryExpression. Explicit Interface Implementations | Improve this Doc View Source IEqualityComparer<BinaryExpression>.Equals(BinaryExpression, BinaryExpression) Determines whether the specified BinaryExpressions are equal. Declaration bool IEqualityComparer<BinaryExpression>.Equals(BinaryExpression x, BinaryExpression y) Parameters Type Name Description BinaryExpression x The first BinaryExpression to compare. BinaryExpression y The second BinaryExpression to compare. Returns Type Description Boolean true if the specified BinaryExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<BinaryExpression>.GetHashCode(BinaryExpression) Returns a hash code for the specified BinaryExpression. Declaration int IEqualityComparer<BinaryExpression>.GetHashCode(BinaryExpression obj) Parameters Type Name Description BinaryExpression obj The BinaryExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified BinaryExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<BlockExpression>.Equals(BlockExpression, BlockExpression) Determines whether the specified BlockExpression are equal. Declaration bool IEqualityComparer<BlockExpression>.Equals(BlockExpression x, BlockExpression y) Parameters Type Name Description BlockExpression x The first BlockExpression to compare. BlockExpression y The second BlockExpression to compare. Returns Type Description Boolean true if the specified BlockExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<BlockExpression>.GetHashCode(BlockExpression) Returns a hash code for the specified BlockExpression. Declaration int IEqualityComparer<BlockExpression>.GetHashCode(BlockExpression obj) Parameters Type Name Description BlockExpression obj The BlockExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified BlockExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<ConditionalExpression>.Equals(ConditionalExpression, ConditionalExpression) Determines whether the specified ConditionalExpressions are equal. Declaration bool IEqualityComparer<ConditionalExpression>.Equals(ConditionalExpression x, ConditionalExpression y) Parameters Type Name Description ConditionalExpression x The first ConditionalExpression to compare. ConditionalExpression y The second ConditionalExpression to compare. Returns Type Description Boolean true if the specified ConditionalExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<ConditionalExpression>.GetHashCode(ConditionalExpression) Returns a hash code for the specified ConditionalExpression. Declaration int IEqualityComparer<ConditionalExpression>.GetHashCode(ConditionalExpression obj) Parameters Type Name Description ConditionalExpression obj The ConditionalExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified ConditionalExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<ConstantExpression>.Equals(ConstantExpression, ConstantExpression) Determines whether the specified ConstantExpressions are equal. Declaration bool IEqualityComparer<ConstantExpression>.Equals(ConstantExpression x, ConstantExpression y) Parameters Type Name Description ConstantExpression x The first ConstantExpression to compare. ConstantExpression y The second ConstantExpression to compare. Returns Type Description Boolean true if the specified ConstantExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<ConstantExpression>.GetHashCode(ConstantExpression) Returns a hash code for the specified ConstantExpression. Declaration int IEqualityComparer<ConstantExpression>.GetHashCode(ConstantExpression obj) Parameters Type Name Description ConstantExpression obj The ConstantExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified ConstantExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<DebugInfoExpression>.Equals(DebugInfoExpression, DebugInfoExpression) Determines whether the specified DebugInfoExpressions are equal. Declaration bool IEqualityComparer<DebugInfoExpression>.Equals(DebugInfoExpression x, DebugInfoExpression y) Parameters Type Name Description DebugInfoExpression x The first DebugInfoExpression to compare. DebugInfoExpression y The second DebugInfoExpression to compare. Returns Type Description Boolean true if the specified DebugInfoExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<DebugInfoExpression>.GetHashCode(DebugInfoExpression) Returns a hash code for the specified DebugInfoExpression. Declaration int IEqualityComparer<DebugInfoExpression>.GetHashCode(DebugInfoExpression obj) Parameters Type Name Description DebugInfoExpression obj The DebugInfoExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified DebugInfoExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<DefaultExpression>.Equals(DefaultExpression, DefaultExpression) Determines whether the specified DefaultExpressions are equal. Declaration bool IEqualityComparer<DefaultExpression>.Equals(DefaultExpression x, DefaultExpression y) Parameters Type Name Description DefaultExpression x The first DefaultExpression to compare. DefaultExpression y The second DefaultExpression to compare. Returns Type Description Boolean true if the specified DefaultExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<DefaultExpression>.GetHashCode(DefaultExpression) Returns a hash code for the specified DefaultExpression. Declaration int IEqualityComparer<DefaultExpression>.GetHashCode(DefaultExpression obj) Parameters Type Name Description DefaultExpression obj The DefaultExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified DefaultExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<DynamicExpression>.Equals(DynamicExpression, DynamicExpression) Determines whether the specified DynamicExpressions are equal. Declaration bool IEqualityComparer<DynamicExpression>.Equals(DynamicExpression x, DynamicExpression y) Parameters Type Name Description DynamicExpression x The first DynamicExpression to compare. DynamicExpression y The second DynamicExpression to compare. Returns Type Description Boolean true if the specified DynamicExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<DynamicExpression>.GetHashCode(DynamicExpression) Returns a hash code for the specified DynamicExpression. Declaration int IEqualityComparer<DynamicExpression>.GetHashCode(DynamicExpression obj) Parameters Type Name Description DynamicExpression obj The DynamicExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified DynamicExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<Expression>.Equals(Expression, Expression) Determines whether two Expressions are equal. Declaration bool IEqualityComparer<Expression>.Equals(Expression x, Expression y) Parameters Type Name Description Expression x The first Expression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<Expression>.GetHashCode(Expression) Serves as a hash function for the specified Expression for hashing algorithms and data structures, such as a hash table. Declaration int IEqualityComparer<Expression>.GetHashCode(Expression obj) Parameters Type Name Description Expression obj The Expression for which to get a hash code. Returns Type Description Int32 A hash code for the specified Expression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<GotoExpression>.Equals(GotoExpression, GotoExpression) Determines whether the specified GotoExpressions are equal. Declaration bool IEqualityComparer<GotoExpression>.Equals(GotoExpression x, GotoExpression y) Parameters Type Name Description GotoExpression x The first GotoExpression to compare. GotoExpression y The second GotoExpression to compare. Returns Type Description Boolean true if the specified GotoExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<GotoExpression>.GetHashCode(GotoExpression) Returns a hash code for the specified GotoExpression. Declaration int IEqualityComparer<GotoExpression>.GetHashCode(GotoExpression obj) Parameters Type Name Description GotoExpression obj The GotoExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified GotoExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<IndexExpression>.Equals(IndexExpression, IndexExpression) Determines whether the specified IndexExpressions are equal. Declaration bool IEqualityComparer<IndexExpression>.Equals(IndexExpression x, IndexExpression y) Parameters Type Name Description IndexExpression x The first IndexExpression to compare. IndexExpression y The second IndexExpression to compare. Returns Type Description Boolean true if the specified IndexExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<IndexExpression>.GetHashCode(IndexExpression) Returns a hash code for the specified IndexExpression. Declaration int IEqualityComparer<IndexExpression>.GetHashCode(IndexExpression obj) Parameters Type Name Description IndexExpression obj The IndexExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified IndexExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<InvocationExpression>.Equals(InvocationExpression, InvocationExpression) Determines whether the specified InvocationExpressions are equal. Declaration bool IEqualityComparer<InvocationExpression>.Equals(InvocationExpression x, InvocationExpression y) Parameters Type Name Description InvocationExpression x The first InvocationExpression to compare. InvocationExpression y The second InvocationExpression to compare. Returns Type Description Boolean true if the specified InvocationExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<InvocationExpression>.GetHashCode(InvocationExpression) Returns a hash code for the specified InvocationExpression. Declaration int IEqualityComparer<InvocationExpression>.GetHashCode(InvocationExpression obj) Parameters Type Name Description InvocationExpression obj The InvocationExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified InvocationExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<LabelExpression>.Equals(LabelExpression, LabelExpression) Determines whether the specified LabelExpressions are equal. Declaration bool IEqualityComparer<LabelExpression>.Equals(LabelExpression x, LabelExpression y) Parameters Type Name Description LabelExpression x The first LabelExpression to compare. LabelExpression y The second LabelExpression to compare. Returns Type Description Boolean true if the specified LabelExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<LabelExpression>.GetHashCode(LabelExpression) Returns a hash code for the specified LabelExpression. Declaration int IEqualityComparer<LabelExpression>.GetHashCode(LabelExpression obj) Parameters Type Name Description LabelExpression obj The LabelExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified LabelExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<LambdaExpression>.Equals(LambdaExpression, LambdaExpression) Determines whether the specified LambdaExpressions are equal. Declaration bool IEqualityComparer<LambdaExpression>.Equals(LambdaExpression x, LambdaExpression y) Parameters Type Name Description LambdaExpression x The first LambdaExpression to compare. LambdaExpression y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<LambdaExpression>.GetHashCode(LambdaExpression) Returns a hash code for the specified LambdaExpression. Declaration int IEqualityComparer<LambdaExpression>.GetHashCode(LambdaExpression obj) Parameters Type Name Description LambdaExpression obj The LambdaExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified LambdaExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<ListInitExpression>.Equals(ListInitExpression, ListInitExpression) Determines whether the specified ListInitExpressions are equal. Declaration bool IEqualityComparer<ListInitExpression>.Equals(ListInitExpression x, ListInitExpression y) Parameters Type Name Description ListInitExpression x The first ListInitExpression to compare. ListInitExpression y The second ListInitExpression to compare. Returns Type Description Boolean true if the specified ListInitExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<ListInitExpression>.GetHashCode(ListInitExpression) Returns a hash code for the specified ListInitExpression. Declaration int IEqualityComparer<ListInitExpression>.GetHashCode(ListInitExpression obj) Parameters Type Name Description ListInitExpression obj The ListInitExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified ListInitExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<LoopExpression>.Equals(LoopExpression, LoopExpression) Determines whether the specified LoopExpressions are equal. Declaration bool IEqualityComparer<LoopExpression>.Equals(LoopExpression x, LoopExpression y) Parameters Type Name Description LoopExpression x The first LoopExpression to compare. LoopExpression y The second LoopExpression to compare. Returns Type Description Boolean true if the specified LoopExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<LoopExpression>.GetHashCode(LoopExpression) Returns a hash code for the specified LoopExpression. Declaration int IEqualityComparer<LoopExpression>.GetHashCode(LoopExpression obj) Parameters Type Name Description LoopExpression obj The LoopExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified LoopExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<MemberExpression>.Equals(MemberExpression, MemberExpression) Determines whether the specified MemberExpressions are equal. Declaration bool IEqualityComparer<MemberExpression>.Equals(MemberExpression x, MemberExpression y) Parameters Type Name Description MemberExpression x The first MemberExpression to compare. MemberExpression y The second MemberExpression to compare. Returns Type Description Boolean true if the specified MemberExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<MemberExpression>.GetHashCode(MemberExpression) Returns a hash code for the specified MemberExpression. Declaration int IEqualityComparer<MemberExpression>.GetHashCode(MemberExpression obj) Parameters Type Name Description MemberExpression obj The MemberExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified MemberExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<MemberInitExpression>.Equals(MemberInitExpression, MemberInitExpression) Determines whether the specified MemberInitExpressions are equal. Declaration bool IEqualityComparer<MemberInitExpression>.Equals(MemberInitExpression x, MemberInitExpression y) Parameters Type Name Description MemberInitExpression x The first MemberInitExpression to compare. MemberInitExpression y The second MemberInitExpression to compare. Returns Type Description Boolean true if the specified MemberInitExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<MemberInitExpression>.GetHashCode(MemberInitExpression) Returns a hash code for the specified MemberInitExpression. Declaration int IEqualityComparer<MemberInitExpression>.GetHashCode(MemberInitExpression obj) Parameters Type Name Description MemberInitExpression obj The MemberInitExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified MemberInitExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<MethodCallExpression>.Equals(MethodCallExpression, MethodCallExpression) Determines whether the specified MethodCallExpressions are equal. Declaration bool IEqualityComparer<MethodCallExpression>.Equals(MethodCallExpression x, MethodCallExpression y) Parameters Type Name Description MethodCallExpression x The first MethodCallExpression to compare. MethodCallExpression y The second MethodCallExpression to compare. Returns Type Description Boolean true if the specified MethodCallExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<MethodCallExpression>.GetHashCode(MethodCallExpression) Returns a hash code for the specified MethodCallExpression. Declaration int IEqualityComparer<MethodCallExpression>.GetHashCode(MethodCallExpression obj) Parameters Type Name Description MethodCallExpression obj The MethodCallExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified MethodCallExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<NewArrayExpression>.Equals(NewArrayExpression, NewArrayExpression) Determines whether the specified NewArrayExpressions are equal. Declaration bool IEqualityComparer<NewArrayExpression>.Equals(NewArrayExpression x, NewArrayExpression y) Parameters Type Name Description NewArrayExpression x The first NewArrayExpression to compare. NewArrayExpression y The second NewArrayExpression to compare. Returns Type Description Boolean true if the specified NewArrayExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<NewArrayExpression>.GetHashCode(NewArrayExpression) Returns a hash code for the specified NewArrayExpression. Declaration int IEqualityComparer<NewArrayExpression>.GetHashCode(NewArrayExpression obj) Parameters Type Name Description NewArrayExpression obj The NewArrayExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified NewArrayExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<NewExpression>.Equals(NewExpression, NewExpression) Determines whether the specified NewExpressions are equal. Declaration bool IEqualityComparer<NewExpression>.Equals(NewExpression x, NewExpression y) Parameters Type Name Description NewExpression x The first NewExpression to compare. NewExpression y The second NewExpression to compare. Returns Type Description Boolean true if the specified NewExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<NewExpression>.GetHashCode(NewExpression) Returns a hash code for the specified NewExpression. Declaration int IEqualityComparer<NewExpression>.GetHashCode(NewExpression obj) Parameters Type Name Description NewExpression obj The NewExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified NewExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<ParameterExpression>.Equals(ParameterExpression, ParameterExpression) Determines whether the specified ParameterExpressions are equal. Declaration bool IEqualityComparer<ParameterExpression>.Equals(ParameterExpression x, ParameterExpression y) Parameters Type Name Description ParameterExpression x The first ParameterExpression to compare. ParameterExpression y The second ParameterExpression to compare. Returns Type Description Boolean true if the specified ParameterExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<ParameterExpression>.GetHashCode(ParameterExpression) Returns a hash code for the specified ParameterExpression. Declaration int IEqualityComparer<ParameterExpression>.GetHashCode(ParameterExpression obj) Parameters Type Name Description ParameterExpression obj The ParameterExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified ParameterExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<RuntimeVariablesExpression>.Equals(RuntimeVariablesExpression, RuntimeVariablesExpression) Determines whether the specified RuntimeVariablesExpressions are equal. Declaration bool IEqualityComparer<RuntimeVariablesExpression>.Equals(RuntimeVariablesExpression x, RuntimeVariablesExpression y) Parameters Type Name Description RuntimeVariablesExpression x The first RuntimeVariablesExpression to compare. RuntimeVariablesExpression y The second RuntimeVariablesExpression to compare. Returns Type Description Boolean true if the specified RuntimeVariablesExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<RuntimeVariablesExpression>.GetHashCode(RuntimeVariablesExpression) Returns a hash code for the specified RuntimeVariablesExpression. Declaration int IEqualityComparer<RuntimeVariablesExpression>.GetHashCode(RuntimeVariablesExpression obj) Parameters Type Name Description RuntimeVariablesExpression obj The RuntimeVariablesExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified RuntimeVariablesExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<SwitchExpression>.Equals(SwitchExpression, SwitchExpression) Determines whether the specified SwitchExpressions are equal. Declaration bool IEqualityComparer<SwitchExpression>.Equals(SwitchExpression x, SwitchExpression y) Parameters Type Name Description SwitchExpression x The first SwitchExpression to compare. SwitchExpression y The second SwitchExpression to compare. Returns Type Description Boolean true if the specified SwitchExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<SwitchExpression>.GetHashCode(SwitchExpression) Returns a hash code for the specified SwitchExpression. Declaration int IEqualityComparer<SwitchExpression>.GetHashCode(SwitchExpression obj) Parameters Type Name Description SwitchExpression obj The SwitchExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified SwitchExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<TryExpression>.Equals(TryExpression, TryExpression) Determines whether the specified TryExpressions are equal. Declaration bool IEqualityComparer<TryExpression>.Equals(TryExpression x, TryExpression y) Parameters Type Name Description TryExpression x The first TryExpression to compare. TryExpression y The second TryExpression to compare. Returns Type Description Boolean true if the specified TryExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<TryExpression>.GetHashCode(TryExpression) Returns a hash code for the specified TryExpression. Declaration int IEqualityComparer<TryExpression>.GetHashCode(TryExpression obj) Parameters Type Name Description TryExpression obj The TryExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified TryExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<TypeBinaryExpression>.Equals(TypeBinaryExpression, TypeBinaryExpression) Determines whether the specified TypeBinaryExpressions are equal. Declaration bool IEqualityComparer<TypeBinaryExpression>.Equals(TypeBinaryExpression x, TypeBinaryExpression y) Parameters Type Name Description TypeBinaryExpression x The first TypeBinaryExpression to compare. TypeBinaryExpression y The second TypeBinaryExpression to compare. Returns Type Description Boolean true if the specified TypeBinaryExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<TypeBinaryExpression>.GetHashCode(TypeBinaryExpression) Returns a hash code for the specified TypeBinaryExpression. Declaration int IEqualityComparer<TypeBinaryExpression>.GetHashCode(TypeBinaryExpression obj) Parameters Type Name Description TypeBinaryExpression obj The TypeBinaryExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified TypeBinaryExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<UnaryExpression>.Equals(UnaryExpression, UnaryExpression) Determines whether the specified UnaryExpressions are equal. Declaration bool IEqualityComparer<UnaryExpression>.Equals(UnaryExpression x, UnaryExpression y) Parameters Type Name Description UnaryExpression x The first UnaryExpression to compare. UnaryExpression y The second UnaryExpression to compare. Returns Type Description Boolean true if the specified UnaryExpressions are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<UnaryExpression>.GetHashCode(UnaryExpression) Returns a hash code for the specified UnaryExpression. Declaration int IEqualityComparer<UnaryExpression>.GetHashCode(UnaryExpression obj) Parameters Type Name Description UnaryExpression obj The UnaryExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified UnaryExpression. Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer.Equals(Object, Object) Determines whether two Expressions are equal. Declaration bool IEqualityComparer.Equals(object x, object y) Parameters Type Name Description Object x The first Expression to compare. Object y The second Expression to compare. Returns Type Description Boolean true if the specified Expressions are equal; otherwise, false. Exceptions Type Condition ArgumentException x or y is of a type that cannot be cast to Expression. | Improve this Doc View Source IEqualityComparer.GetHashCode(Object) Serves as a hash function for the specified Expression for hashing algorithms and data structures, such as a hash table. Declaration int IEqualityComparer.GetHashCode([NotNull] object obj) Parameters Type Name Description Object obj The Expression for which to get a hash code. Returns Type Description Int32 A hash code for the specified Expression. Exceptions Type Condition ArgumentNullException The obj is null. ArgumentException obj is of a type that cannot be cast to Expression Implements System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.IEqualityComparer System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T>"
  }
}