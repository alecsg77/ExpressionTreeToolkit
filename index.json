{
  "articles/ExpressionEqualityComparer.html": {
    "href": "articles/ExpressionEqualityComparer.html",
    "title": "Expression Equality Comparer | Expression Tree Toolkit Documentation",
    "keywords": "Expression Equality Comparer The default equality comparison logic between two Expression s verifies only if they refer to the same instance. using System; using System.Collections.Generic; using System.Linq.Expressions; public class Program { static HashSet<Expression> expressions; public static void Main() { IEqualityComparer<Expression> comparer = EqualityComparer<Expression>.Default; expressions = new HashSet<Expression>(comparer); Console.WriteLine(\"Expression equality:\"); AddExpression((x, y) => x + y); AddExpression((x, y) => x * y); AddExpression((x, y) => x + y); AddExpression((a, b) => a * b); Console.WriteLine(); } static void AddExpression(Expression<Func<int,int,int>> exp) { if (expressions.Add(exp)) { Console.WriteLine(\"Added {0}, Count = {1}, HashCode = {2}\", exp.ToString(), expressions.Count.ToString(), exp.GetHashCode()); } else { Console.WriteLine(\"An expression equal to {0} is already in the collection.\", exp.ToString()); } } } /* This example produces the following output: * Expression equality: Added (x, y) => (x + y), Count = 1, HashCode = 9293733 Added (x, y) => (x * y), Count = 2, HashCode = 60803526 Added (x, y) => (x + y), Count = 3, HashCode = 4729318 Added (a, b) => (a * b), Count = 4, HashCode = 4497 * */ The Default implementation of the ExpressionEqualityComparer instead compares each node in the expression tree to determine if two Expression s are equal. using System; using System.Collections.Generic; using System.Linq.Expressions; public class Program { static HashSet<Expression> expressions; public static void Main() { IEqualityComparer<Expression> comparer = ExpressionTreeToolkit.ExpressionEqualityComparer.Default; expressions = new HashSet<Expression>(comparer); Console.WriteLine(\"Expression equality:\"); AddExpression((x, y) => x + y); AddExpression((x, y) => x * y); AddExpression((x, y) => x + y); AddExpression((a, b) => a * b); Console.WriteLine(); } static void AddExpression(Expression<Func<int,int,int>> exp) { if (expressions.Add(exp)) { Console.WriteLine(\"Added {0}, Count = {1}, HashCode = {2}\", exp.ToString(), expressions.Count.ToString(), exp.GetHashCode()); } else { Console.WriteLine(\"An expression equal to {0} is already in the collection.\", exp.ToString()); } } } /* This example produces the following output: * Expression equality: Added (x, y) => (x + y), Count = 1, HashCode = 10529038 Added (x, y) => (x * y), Count = 2, HashCode = 35464548 An expression equal to (x, y) => (x + y) is already in the collection. An expression equal to (a, b) => (a * b) is already in the collection. * */ Note The comparison logic is different for each ExpressionType . Please refers to the source code."
  },
  "articles/ExpressionIterator.html": {
    "href": "articles/ExpressionIterator.html",
    "title": "Expression Iterator | Expression Tree Toolkit Documentation",
    "keywords": "Expression Iterator"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction to Expression Tree Toolkit | Expression Tree Toolkit Documentation",
    "keywords": "Introduction to Expression Tree Toolkit Why Expression Tree Toolkit? Provide a centralized shared point of the most common functionalities around the expression trees, to save time and focus on more business-relevant functionality Simplifies the use of expression trees to facilitate their adoption in many contexts other than query and dynamic code generation."
  },
  "index.html": {
    "href": "index.html",
    "title": "ExpressionTreeToolkit | Expression Tree Toolkit Documentation",
    "keywords": "ExpressionTreeToolkit What is Expression Tree Toolkit The Expression Tree Toolkit is a collection of helper functions, extension methods, and ready-to-use classes. It simplifies common developer tasks manipulating expression trees. Summary Expression Equality Comparer Expression Iterator Getting Started NuGet Package Name Description ExpressionTreeToolkit.Core .NET NuGet package containing core code See It In Action ExpressionEqualityComparer example on dotnetfiddle Contribution Guidelines Please use GitHub Issues for bug reports and feature requests. Logo Credits Font in use Comfortaa-Bold designed by Johan Aakerlund and licensed under Open Font License . “ Tree ” icon by Edward Boatman from the Noun Project ."
  },
  "lib/ExpressionTreeToolkit.ExpressionEqualityComparer.ComparisonContext.html": {
    "href": "lib/ExpressionTreeToolkit.ExpressionEqualityComparer.ComparisonContext.html",
    "title": "Class ExpressionEqualityComparer.ComparisonContext | Expression Tree Toolkit Documentation",
    "keywords": "Class ExpressionEqualityComparer.ComparisonContext Provides contextual information that can be use to verify elements in a global or local scopes. Inheritance Object ExpressionEqualityComparer.ComparisonContext Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ExpressionTreeToolkit Assembly : ExpressionTreeToolkit.Core.dll Syntax protected class ComparisonContext Constructors | Improve this Doc View Source ComparisonContext() Initializes a new instance of the ComparisonContext class. Declaration public ComparisonContext() | Improve this Doc View Source ComparisonContext(ExpressionEqualityComparer.ComparisonContext, ReadOnlyCollection<ParameterExpression>, ReadOnlyCollection<ParameterExpression>) Initializes a new instance of the ComparisonContext class that represents a nested scope. Declaration protected ComparisonContext(ExpressionEqualityComparer.ComparisonContext parent, ReadOnlyCollection<ParameterExpression> xParameters, ReadOnlyCollection<ParameterExpression> yParameters) Parameters Type Name Description ExpressionEqualityComparer.ComparisonContext parent The parent ComparisonContext. ReadOnlyCollection < ParameterExpression > xParameters The ReadOnlyCollection < ParameterExpression > parameters of x ReadOnlyCollection < ParameterExpression > yParameters The ReadOnlyCollection < ParameterExpression > parameters of y Methods | Improve this Doc View Source NestedScope(ReadOnlyCollection<ParameterExpression>, ReadOnlyCollection<ParameterExpression>) Returns a new nested ExpressionEqualityComparer.ComparisonContext . Declaration public ExpressionEqualityComparer.ComparisonContext NestedScope(ReadOnlyCollection<ParameterExpression> xVariables, ReadOnlyCollection<ParameterExpression> yVariables) Parameters Type Name Description ReadOnlyCollection < ParameterExpression > xVariables The first ReadOnlyCollection < ParameterExpression > ReadOnlyCollection < ParameterExpression > yVariables The second ReadOnlyCollection < ParameterExpression > Returns Type Description ExpressionEqualityComparer.ComparisonContext The nested ComparisonContext. | Improve this Doc View Source VerifyLabelTarget(LabelTarget, LabelTarget) Determines whether the two LabelTarget are equal in the context. Declaration public virtual bool VerifyLabelTarget(LabelTarget x, LabelTarget y) Parameters Type Name Description LabelTarget x The first LabelTarget to compare. LabelTarget y The second LabelTarget to compare. Returns Type Description Boolean true if the specified LabelTarget are equal in the context; otherwise, false. | Improve this Doc View Source VerifyParameter(ParameterExpression, ParameterExpression) Determines whether the two ParameterExpression are equal in the context. Declaration public bool VerifyParameter(ParameterExpression x, ParameterExpression y) Parameters Type Name Description ParameterExpression x The first ParameterExpression to compare. ParameterExpression y The second ParameterExpression to compare. Returns Type Description Boolean true if the specified ParameterExpression are equal in the context; otherwise, false."
  },
  "lib/ExpressionTreeToolkit.ExpressionEqualityComparer.html": {
    "href": "lib/ExpressionTreeToolkit.ExpressionEqualityComparer.html",
    "title": "Class ExpressionEqualityComparer | Expression Tree Toolkit Documentation",
    "keywords": "Class ExpressionEqualityComparer Expression Equality Comparer Inheritance Object ExpressionEqualityComparer Implements IEqualityComparer < BinaryExpression > IEqualityComparer < BlockExpression > IEqualityComparer < ConditionalExpression > IEqualityComparer < ConstantExpression > IEqualityComparer < Expression > IEqualityComparer IEqualityComparer < DebugInfoExpression > IEqualityComparer < DefaultExpression > IEqualityComparer < DynamicExpression > IEqualityComparer < GotoExpression > IEqualityComparer < IndexExpression > IEqualityComparer < InvocationExpression > IEqualityComparer < LabelExpression > IEqualityComparer < LambdaExpression > IEqualityComparer < ListInitExpression > IEqualityComparer < LoopExpression > IEqualityComparer < MemberExpression > IEqualityComparer < MemberInitExpression > IEqualityComparer < MethodCallExpression > IEqualityComparer < NewExpression > IEqualityComparer < NewArrayExpression > IEqualityComparer < ParameterExpression > IEqualityComparer < RuntimeVariablesExpression > IEqualityComparer < SwitchExpression > IEqualityComparer < TryExpression > IEqualityComparer < TypeBinaryExpression > IEqualityComparer < UnaryExpression > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ExpressionTreeToolkit Assembly : ExpressionTreeToolkit.Core.dll Syntax public class ExpressionEqualityComparer : IEqualityComparer<BinaryExpression>, IEqualityComparer<BlockExpression>, IEqualityComparer<ConditionalExpression>, IEqualityComparer<ConstantExpression>, IEqualityComparer<Expression>, IEqualityComparer, IEqualityComparer<DebugInfoExpression>, IEqualityComparer<DefaultExpression>, IEqualityComparer<DynamicExpression>, IEqualityComparer<GotoExpression>, IEqualityComparer<IndexExpression>, IEqualityComparer<InvocationExpression>, IEqualityComparer<LabelExpression>, IEqualityComparer<LambdaExpression>, IEqualityComparer<ListInitExpression>, IEqualityComparer<LoopExpression>, IEqualityComparer<MemberExpression>, IEqualityComparer<MemberInitExpression>, IEqualityComparer<MethodCallExpression>, IEqualityComparer<NewExpression>, IEqualityComparer<NewArrayExpression>, IEqualityComparer<ParameterExpression>, IEqualityComparer<RuntimeVariablesExpression>, IEqualityComparer<SwitchExpression>, IEqualityComparer<TryExpression>, IEqualityComparer<TypeBinaryExpression>, IEqualityComparer<UnaryExpression> Examples The following example a dictionary collection of objects of type Expression with the Default expression equality comparer. using System; using System.Collections.Generic; using System.Linq.Expressions; using ExpressionTreeToolkit; public class Program { static Dictionary<Expression, String> expressions; public static void Main() { expressions = new Dictionary<Expression, string>(ExpressionEqualityComparer.Default); Console.WriteLine(\"Expression equality:\"); Expression<Func<int, int, int>> sumXYExpression = (x, y) => x + y; Expression<Func<int, int, int>> prodXYExpression = (x, y) => x * y; Expression<Func<int, int, int>> sumABExpression = (a, b) => a + b; Expression<Func<int, int, int>> diffABExpression = (a, b) => a - b; AddExpression(sumXYExpression, \"x + y\"); AddExpression(prodXYExpression, \"x * y\"); AddExpression(sumABExpression, \"a + b\"); AddExpression(diffABExpression, \"a - b\"); Console.WriteLine(); } static void AddExpression(Expression exp, string name) { try { expressions.Add(exp, name); Console.WriteLine(\"Added {0}, Count = {1}, HashCode = {2}\", name, expressions.Count.ToString(), exp.GetHashCode()); } catch (ArgumentException) { Console.WriteLine(\"An expression equal to {0} is already in the collection.\", name); } } } /* This example produces the following output: * Expression equality: Added x + y, Count = 1, HashCode = 9265398 Added x * y, Count = 2, HashCode = 261086 An expression equal to a + b is already in the collection. Added a - b, Count = 3, HashCode = 7571494 * */ Constructors | Improve this Doc View Source ExpressionEqualityComparer() Initializes a new instance of the Expression EqualityComparer class. Declaration public ExpressionEqualityComparer() | Improve this Doc View Source ExpressionEqualityComparer(IEqualityComparer<Expression>) Initializes a new instance of the ExpressionEqualityComparer class and uses the specified equality comparer for the unknown Expression node. Declaration public ExpressionEqualityComparer(IEqualityComparer<Expression> equalityComparer) Parameters Type Name Description IEqualityComparer < Expression > equalityComparer The EqualityComparer for comparing unknown Expression node in the Expression tree, or null to use the default EqualityComparer implementation. Fields | Improve this Doc View Source Default Returns a default ExpressionEqualityComparer . Declaration public static readonly ExpressionEqualityComparer Default Field Value Type Description ExpressionEqualityComparer Methods | Improve this Doc View Source BeginScope() Returns a new ComparisonContext that represents root scope. Declaration protected virtual ExpressionEqualityComparer.ComparisonContext BeginScope() Returns Type Description ExpressionEqualityComparer.ComparisonContext The root ComparisonContext. | Improve this Doc View Source Equals(ReadOnlyCollection<Expression>, ReadOnlyCollection<Expression>, ExpressionEqualityComparer.ComparisonContext) Determines whether two collections are equal by comparing the nodes. Declaration protected bool Equals(ReadOnlyCollection<Expression> first, ReadOnlyCollection<Expression> second, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description ReadOnlyCollection < Expression > first A collection of Expression to compare. ReadOnlyCollection < Expression > second A collection of Expression to compare to the first sequence. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the two nodes sequences are of equal length and their corresponding elements are equal; otherwise, false. | Improve this Doc View Source Equals(Expression, Expression) Determines whether two Expression s are equal. Declaration public virtual bool Equals(Expression x, Expression y) Parameters Type Name Description Expression x The first Expression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. | Improve this Doc View Source Equals(Expression, Expression, ExpressionEqualityComparer.ComparisonContext) Determines whether two Expression s are equal. Declaration protected virtual bool Equals(Expression x, Expression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description Expression x The first Expression to compare. Expression y The second Expression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. | Improve this Doc View Source Equals<T>(ReadOnlyCollection<T>, ReadOnlyCollection<T>, ExpressionEqualityComparer.ComparisonContext) Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type. Declaration protected bool Equals<T>(ReadOnlyCollection<T> first, ReadOnlyCollection<T> second, ExpressionEqualityComparer.ComparisonContext context) where T : class Parameters Type Name Description ReadOnlyCollection <T> first An ReadOnlyCollection<T> to compare to second. ReadOnlyCollection <T> second An ReadOnlyCollection<T> to compare to the first sequence. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false. Type Parameters Name Description T The type of the elements of the input sequences. | Improve this Doc View Source Equals<T>(ReadOnlyCollection<T>, ReadOnlyCollection<T>, Func<T, T, ExpressionEqualityComparer.ComparisonContext, Boolean>, ExpressionEqualityComparer.ComparisonContext) Determines whether two sequences are equal by comparing their elements by using a specified Func<T1,T2,TResult> . Declaration protected bool Equals<T>(ReadOnlyCollection<T> first, ReadOnlyCollection<T> second, Func<T, T, ExpressionEqualityComparer.ComparisonContext, bool> equalityComparer, ExpressionEqualityComparer.ComparisonContext context) where T : class Parameters Type Name Description ReadOnlyCollection <T> first An ReadOnlyCollection<T> to compare to second. ReadOnlyCollection <T> second An ReadOnlyCollection<T> to compare to the first sequence. Func <T, T, ExpressionEqualityComparer.ComparisonContext , Boolean > equalityComparer An Func<T1,T2,TResult> to use to compare elements. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the two source sequences are of equal length and their corresponding elements compare equal according to equalityComparer ; otherwise, false. Type Parameters Name Description T The type of the elements of the input sequences. | Improve this Doc View Source EqualsBinary(BinaryExpression, BinaryExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two BinaryExpression are equal. Declaration protected virtual bool EqualsBinary(BinaryExpression x, BinaryExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description BinaryExpression x The first BinaryExpression to compare. BinaryExpression y The second BinaryExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified BinaryExpression are equal; otherwise, false. | Improve this Doc View Source EqualsBlock(BlockExpression, BlockExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two BlockExpression are equal. Declaration protected virtual bool EqualsBlock(BlockExpression x, BlockExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description BlockExpression x The first BlockExpression to compare. BlockExpression y The second BlockExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified BlockExpression are equal; otherwise, false. | Improve this Doc View Source EqualsCatchBlock(CatchBlock, CatchBlock, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two CatchBlock are equal. Declaration protected virtual bool EqualsCatchBlock(CatchBlock x, CatchBlock y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description CatchBlock x The first CatchBlock to compare. CatchBlock y The second CatchBlock to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified CatchBlock are equal; otherwise, false. | Improve this Doc View Source EqualsConditional(ConditionalExpression, ConditionalExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two ConditionalExpression are equal. Declaration protected virtual bool EqualsConditional(ConditionalExpression x, ConditionalExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description ConditionalExpression x The first ConditionalExpression to compare. ConditionalExpression y The second ConditionalExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified ConditionalExpression are equal; otherwise, false. | Improve this Doc View Source EqualsConstant(ConstantExpression, ConstantExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two ConstantExpression are equal. Declaration protected virtual bool EqualsConstant(ConstantExpression x, ConstantExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description ConstantExpression x The first ConstantExpression to compare. ConstantExpression y The second ConstantExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified ConstantExpression are equal; otherwise, false. | Improve this Doc View Source EqualsDebugInfo(DebugInfoExpression, DebugInfoExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two DebugInfoExpression are equal. Declaration protected virtual bool EqualsDebugInfo(DebugInfoExpression x, DebugInfoExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description DebugInfoExpression x The first DebugInfoExpression to compare. DebugInfoExpression y The second DebugInfoExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified DebugInfoExpression are equal; otherwise, false. | Improve this Doc View Source EqualsDefault(DefaultExpression, DefaultExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two DefaultExpression are equal. Declaration protected virtual bool EqualsDefault(DefaultExpression x, DefaultExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description DefaultExpression x The first DefaultExpression to compare. DefaultExpression y The second DefaultExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified DefaultExpression are equal; otherwise, false. | Improve this Doc View Source EqualsDynamic(DynamicExpression, DynamicExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two DynamicExpression are equal. Declaration protected virtual bool EqualsDynamic(DynamicExpression x, DynamicExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description DynamicExpression x The first DynamicExpression to compare. DynamicExpression y The second DynamicExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified DynamicExpression are equal; otherwise, false. | Improve this Doc View Source EqualsElementInit(ElementInit, ElementInit, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two ElementInit are equal. Declaration protected virtual bool EqualsElementInit(ElementInit x, ElementInit y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description ElementInit x The first ElementInit to compare. ElementInit y The second ElementInit to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified ElementInit are equal; otherwise, false. | Improve this Doc View Source EqualsExtension(Expression, Expression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two extension Expression are equal. Declaration protected virtual bool EqualsExtension(Expression x, Expression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description Expression x The first extension Expression to compare. Expression y The second extension Expression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified extension Expression are equal; otherwise, false. | Improve this Doc View Source EqualsGoto(GotoExpression, GotoExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two GotoExpression are equal. Declaration protected virtual bool EqualsGoto(GotoExpression x, GotoExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description GotoExpression x The first GotoExpression to compare. GotoExpression y The second GotoExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified GotoExpression are equal; otherwise, false. | Improve this Doc View Source EqualsIndex(IndexExpression, IndexExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two IndexExpression are equal. Declaration protected virtual bool EqualsIndex(IndexExpression x, IndexExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description IndexExpression x The first IndexExpression to compare. IndexExpression y The second IndexExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified IndexExpression are equal; otherwise, false. | Improve this Doc View Source EqualsInvocation(InvocationExpression, InvocationExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two InvocationExpression are equal. Declaration protected virtual bool EqualsInvocation(InvocationExpression x, InvocationExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description InvocationExpression x The first InvocationExpression to compare. InvocationExpression y The second InvocationExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified InvocationExpression are equal; otherwise, false. | Improve this Doc View Source EqualsLabel(LabelExpression, LabelExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two LabelExpression are equal. Declaration protected virtual bool EqualsLabel(LabelExpression x, LabelExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description LabelExpression x The first LabelExpression to compare. LabelExpression y The second LabelExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified LabelExpression are equal; otherwise, false. | Improve this Doc View Source EqualsLabelTarget(LabelTarget, LabelTarget, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two LabelTarget are equal. Declaration protected virtual bool EqualsLabelTarget(LabelTarget x, LabelTarget y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description LabelTarget x The first LabelTarget to compare. LabelTarget y The second LabelTarget to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified LabelTarget are equal; otherwise, false. | Improve this Doc View Source EqualsLambda(LambdaExpression, LambdaExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two LambdaExpression are equal. Declaration protected virtual bool EqualsLambda(LambdaExpression x, LambdaExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description LambdaExpression x The first LambdaExpression to compare. LambdaExpression y The second LambdaExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified LambdaExpression are equal; otherwise, false. | Improve this Doc View Source EqualsListInit(ListInitExpression, ListInitExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two ListInitExpression are equal. Declaration protected virtual bool EqualsListInit(ListInitExpression x, ListInitExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description ListInitExpression x The first ListInitExpression to compare. ListInitExpression y The second ListInitExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified ListInitExpression are equal; otherwise, false. | Improve this Doc View Source EqualsLoop(LoopExpression, LoopExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two LoopExpression are equal. Declaration protected virtual bool EqualsLoop(LoopExpression x, LoopExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description LoopExpression x The first LoopExpression to compare. LoopExpression y The second LoopExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified LoopExpression are equal; otherwise, false. | Improve this Doc View Source EqualsMember(MemberExpression, MemberExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two MemberExpression are equal. Declaration protected virtual bool EqualsMember(MemberExpression x, MemberExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description MemberExpression x The first MemberExpression to compare. MemberExpression y The second MemberExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified MemberExpression are equal; otherwise, false. | Improve this Doc View Source EqualsMemberAssignment(MemberAssignment, MemberAssignment, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two MemberAssignment are equal. Declaration protected virtual bool EqualsMemberAssignment(MemberAssignment x, MemberAssignment y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description MemberAssignment x The first MemberAssignment to compare. MemberAssignment y The second MemberAssignment to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified MemberAssignment are equal; otherwise, false. | Improve this Doc View Source EqualsMemberBinding(MemberBinding, MemberBinding, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two MemberBinding are equal. Declaration protected virtual bool EqualsMemberBinding(MemberBinding x, MemberBinding y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description MemberBinding x The first MemberBinding to compare. MemberBinding y The second MemberBinding to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified MemberBinding are equal; otherwise, false. | Improve this Doc View Source EqualsMemberInit(MemberInitExpression, MemberInitExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two MemberInitExpression are equal. Declaration protected virtual bool EqualsMemberInit(MemberInitExpression x, MemberInitExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description MemberInitExpression x The first MemberInitExpression to compare. MemberInitExpression y The second MemberInitExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified MemberInitExpression are equal; otherwise, false. | Improve this Doc View Source EqualsMemberListBinding(MemberListBinding, MemberListBinding, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two MemberListBinding are equal. Declaration protected virtual bool EqualsMemberListBinding(MemberListBinding x, MemberListBinding y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description MemberListBinding x The first MemberListBinding to compare. MemberListBinding y The second MemberListBinding to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified MemberListBinding are equal; otherwise, false. | Improve this Doc View Source EqualsMemberMemberBinding(MemberMemberBinding, MemberMemberBinding, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two MemberMemberBinding are equal. Declaration protected virtual bool EqualsMemberMemberBinding(MemberMemberBinding x, MemberMemberBinding y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description MemberMemberBinding x The first MemberMemberBinding to compare. MemberMemberBinding y The second MemberMemberBinding to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified MemberMemberBinding are equal; otherwise, false. | Improve this Doc View Source EqualsMethodCall(MethodCallExpression, MethodCallExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two MethodCallExpression are equal. Declaration protected virtual bool EqualsMethodCall(MethodCallExpression x, MethodCallExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description MethodCallExpression x The first MethodCallExpression to compare. MethodCallExpression y The second MethodCallExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified MethodCallExpression are equal; otherwise, false. | Improve this Doc View Source EqualsNew(NewExpression, NewExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two NewExpression are equal. Declaration protected virtual bool EqualsNew(NewExpression x, NewExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description NewExpression x The first NewExpression to compare. NewExpression y The second NewExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified NewExpression are equal; otherwise, false. | Improve this Doc View Source EqualsNewArray(NewArrayExpression, NewArrayExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two NewArrayExpression are equal. Declaration protected virtual bool EqualsNewArray(NewArrayExpression x, NewArrayExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description NewArrayExpression x The first NewArrayExpression to compare. NewArrayExpression y The second NewArrayExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified NewArrayExpression are equal; otherwise, false. | Improve this Doc View Source EqualsParameter(ParameterExpression, ParameterExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two ParameterExpression are equal. Declaration protected virtual bool EqualsParameter(ParameterExpression x, ParameterExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description ParameterExpression x The first ParameterExpression to compare. ParameterExpression y The second ParameterExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified ParameterExpression are equal; otherwise, false. | Improve this Doc View Source EqualsRuntimeVariables(RuntimeVariablesExpression, RuntimeVariablesExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two RuntimeVariablesExpression are equal. Declaration protected virtual bool EqualsRuntimeVariables(RuntimeVariablesExpression x, RuntimeVariablesExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description RuntimeVariablesExpression x The first RuntimeVariablesExpression to compare. RuntimeVariablesExpression y The second RuntimeVariablesExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified RuntimeVariablesExpression are equal; otherwise, false. | Improve this Doc View Source EqualsSwitch(SwitchExpression, SwitchExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two SwitchExpression are equal. Declaration protected virtual bool EqualsSwitch(SwitchExpression x, SwitchExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description SwitchExpression x The first SwitchExpression to compare. SwitchExpression y The second SwitchExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified SwitchExpression are equal; otherwise, false. | Improve this Doc View Source EqualsSwitchCase(SwitchCase, SwitchCase, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two SwitchCase are equal. Declaration protected virtual bool EqualsSwitchCase(SwitchCase x, SwitchCase y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description SwitchCase x The first SwitchCase to compare. SwitchCase y The second SwitchCase to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified SwitchCase are equal; otherwise, false. | Improve this Doc View Source EqualsTry(TryExpression, TryExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two TryExpression are equal. Declaration protected virtual bool EqualsTry(TryExpression x, TryExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description TryExpression x The first TryExpression to compare. TryExpression y The second TryExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified TryExpression are equal; otherwise, false. | Improve this Doc View Source EqualsTypeBinary(TypeBinaryExpression, TypeBinaryExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two TypeBinaryExpression are equal. Declaration protected virtual bool EqualsTypeBinary(TypeBinaryExpression x, TypeBinaryExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description TypeBinaryExpression x The first TypeBinaryExpression to compare. TypeBinaryExpression y The second TypeBinaryExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified TypeBinaryExpression are equal; otherwise, false. | Improve this Doc View Source EqualsUnary(UnaryExpression, UnaryExpression, ExpressionEqualityComparer.ComparisonContext) Determines whether the children of the two UnaryExpression are equal. Declaration protected virtual bool EqualsUnary(UnaryExpression x, UnaryExpression y, ExpressionEqualityComparer.ComparisonContext context) Parameters Type Name Description UnaryExpression x The first UnaryExpression to compare. UnaryExpression y The second UnaryExpression to compare. ExpressionEqualityComparer.ComparisonContext context Returns Type Description Boolean true if the specified UnaryExpression are equal; otherwise, false. | Improve this Doc View Source GetHashCode(ReadOnlyCollection<Expression>) Computes the hash of a sequence of Expression nodes. Declaration protected int GetHashCode(ReadOnlyCollection<Expression> nodes) Parameters Type Name Description ReadOnlyCollection < Expression > nodes A sequence of Expression nodes to calculate the hash of. Returns Type Description Int32 The hash of the sequence of nodes. | Improve this Doc View Source GetHashCode(Expression) Serves as a hash function for the specified Expression for hashing algorithms and data structures, such as a hash table. Declaration public virtual int GetHashCode(Expression expression) Parameters Type Name Description Expression expression The Expression for which to get a hash code. Returns Type Description Int32 A hash code for the specified Expression . | Improve this Doc View Source GetHashCode<T>(ReadOnlyCollection<T>) Computes the hash of a sequence of values by using the default equality comparer for their type. Declaration protected int GetHashCode<T>(ReadOnlyCollection<T> values) where T : class Parameters Type Name Description ReadOnlyCollection <T> values A sequence of values to calculate the hash of. Returns Type Description Int32 The hash of the sequence of values. Type Parameters Name Description T The type of the elements of values. | Improve this Doc View Source GetHashCode<T>(ReadOnlyCollection<T>, Func<T, Int32>) Computes the hash of a sequence of values by using a specified Func<T,TResult> . Declaration protected int GetHashCode<T>(ReadOnlyCollection<T> values, Func<T, int> getHashCode) where T : class Parameters Type Name Description ReadOnlyCollection <T> values A sequence of values to calculate the hash of. Func <T, Int32 > getHashCode An Func<T,TResult> to use to computes the hash of elements. Returns Type Description Int32 The hash of the sequence of values. Type Parameters Name Description T The type of the elements of values. | Improve this Doc View Source GetHashCodeBinary(BinaryExpression) Gets the hash code for the specified BinaryExpression . Declaration protected virtual int GetHashCodeBinary(BinaryExpression node) Parameters Type Name Description BinaryExpression node The BinaryExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified BinaryExpression . | Improve this Doc View Source GetHashCodeBlock(BlockExpression) Gets the hash code for the specified BlockExpression . Declaration protected virtual int GetHashCodeBlock(BlockExpression node) Parameters Type Name Description BlockExpression node The BlockExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified BlockExpression . | Improve this Doc View Source GetHashCodeCatchBlock(CatchBlock) Gets the hash code for the specified CatchBlock. Declaration protected virtual int GetHashCodeCatchBlock(CatchBlock catchBlock) Parameters Type Name Description CatchBlock catchBlock The CatchBlock for which to get a hash code. Returns Type Description Int32 A hash code for the specified CatchBlock. | Improve this Doc View Source GetHashCodeConditional(ConditionalExpression) Gets the hash code for the specified ConditionalExpression . Declaration protected virtual int GetHashCodeConditional(ConditionalExpression node) Parameters Type Name Description ConditionalExpression node The ConditionalExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified ConditionalExpression . | Improve this Doc View Source GetHashCodeConstant(ConstantExpression) Gets the hash code for the specified ConstantExpression . Declaration protected virtual int GetHashCodeConstant(ConstantExpression node) Parameters Type Name Description ConstantExpression node The ConstantExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified ConstantExpression . | Improve this Doc View Source GetHashCodeDebugInfo(DebugInfoExpression) Gets the hash code for the specified DebugInfoExpression . Declaration protected virtual int GetHashCodeDebugInfo(DebugInfoExpression node) Parameters Type Name Description DebugInfoExpression node The DebugInfoExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified DebugInfoExpression . | Improve this Doc View Source GetHashCodeDefault(DefaultExpression) Gets the hash code for the specified DefaultExpression . Declaration protected virtual int GetHashCodeDefault(DefaultExpression node) Parameters Type Name Description DefaultExpression node The DefaultExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified DefaultExpression . | Improve this Doc View Source GetHashCodeDynamic(DynamicExpression) Gets the hash code for the specified DynamicExpression . Declaration protected virtual int GetHashCodeDynamic(DynamicExpression node) Parameters Type Name Description DynamicExpression node The DynamicExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified DynamicExpression . | Improve this Doc View Source GetHashCodeElementInit(ElementInit) Gets the hash code for the specified ElementInit. Declaration protected virtual int GetHashCodeElementInit(ElementInit elementInit) Parameters Type Name Description ElementInit elementInit The ElementInit for which to get a hash code. Returns Type Description Int32 A hash code for the specified ElementInit. | Improve this Doc View Source GetHashCodeExtension(Expression) Gets the hash code for the specified extension Expression . Declaration protected virtual int GetHashCodeExtension(Expression obj) Parameters Type Name Description Expression obj Returns Type Description Int32 A hash code for the specified extension Expression . | Improve this Doc View Source GetHashCodeGoto(GotoExpression) Gets the hash code for the specified GotoExpression . Declaration protected virtual int GetHashCodeGoto(GotoExpression node) Parameters Type Name Description GotoExpression node The GotoExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified GotoExpression . | Improve this Doc View Source GetHashCodeIndex(IndexExpression) Gets the hash code for the specified IndexExpression . Declaration protected virtual int GetHashCodeIndex(IndexExpression node) Parameters Type Name Description IndexExpression node The IndexExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified IndexExpression . | Improve this Doc View Source GetHashCodeInvocation(InvocationExpression) Gets the hash code for the specified InvocationExpression . Declaration protected virtual int GetHashCodeInvocation(InvocationExpression node) Parameters Type Name Description InvocationExpression node The InvocationExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified InvocationExpression . | Improve this Doc View Source GetHashCodeLabel(LabelExpression) Gets the hash code for the specified LabelExpression . Declaration protected virtual int GetHashCodeLabel(LabelExpression node) Parameters Type Name Description LabelExpression node The LabelExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LabelExpression . | Improve this Doc View Source GetHashCodeLabelTarget(LabelTarget) Gets the hash code for the specified LabelTarget. Declaration protected virtual int GetHashCodeLabelTarget(LabelTarget labelTarget) Parameters Type Name Description LabelTarget labelTarget The LabelTarget for which to get a hash code. Returns Type Description Int32 A hash code for the specified LabelTarget. | Improve this Doc View Source GetHashCodeLambda(LambdaExpression) Gets the hash code for the specified LambdaExpression . Declaration protected virtual int GetHashCodeLambda(LambdaExpression node) Parameters Type Name Description LambdaExpression node The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . | Improve this Doc View Source GetHashCodeListInit(ListInitExpression) Gets the hash code for the specified ListInitExpression . Declaration protected virtual int GetHashCodeListInit(ListInitExpression node) Parameters Type Name Description ListInitExpression node The ListInitExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified ListInitExpression . | Improve this Doc View Source GetHashCodeLoop(LoopExpression) Gets the hash code for the specified LoopExpression . Declaration protected virtual int GetHashCodeLoop(LoopExpression node) Parameters Type Name Description LoopExpression node The LoopExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LoopExpression . | Improve this Doc View Source GetHashCodeMember(MemberExpression) Gets the hash code for the specified MemberExpression . Declaration protected virtual int GetHashCodeMember(MemberExpression node) Parameters Type Name Description MemberExpression node The MemberExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified MemberExpression . | Improve this Doc View Source GetHashCodeMemberAssignment(MemberAssignment) Gets the hash code for the specified MemberAssignment. Declaration protected virtual int GetHashCodeMemberAssignment(MemberAssignment memberAssignment) Parameters Type Name Description MemberAssignment memberAssignment The MemberAssignment for which to get a hash code. Returns Type Description Int32 A hash code for the specified MemberAssignment. | Improve this Doc View Source GetHashCodeMemberBinding(MemberBinding) Gets the hash code for the specified MemberBinding. Declaration protected virtual int GetHashCodeMemberBinding(MemberBinding memberBinding) Parameters Type Name Description MemberBinding memberBinding The MemberBinding for which to get a hash code. Returns Type Description Int32 A hash code for the specified MemberBinding. | Improve this Doc View Source GetHashCodeMemberInit(MemberInitExpression) Gets the hash code for the specified MemberInitExpression . Declaration protected virtual int GetHashCodeMemberInit(MemberInitExpression node) Parameters Type Name Description MemberInitExpression node The MemberInitExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified MemberInitExpression . | Improve this Doc View Source GetHashCodeMemberListBinding(MemberListBinding) Gets the hash code for the specified MemberListBinding. Declaration protected virtual int GetHashCodeMemberListBinding(MemberListBinding memberListBinding) Parameters Type Name Description MemberListBinding memberListBinding The MemberListBinding for which to get a hash code. Returns Type Description Int32 A hash code for the specified MemberListBinding. | Improve this Doc View Source GetHashCodeMemberMemberBinding(MemberMemberBinding) Gets the hash code for the specified MemberMemberBinding. Declaration protected virtual int GetHashCodeMemberMemberBinding(MemberMemberBinding memberMemberBinding) Parameters Type Name Description MemberMemberBinding memberMemberBinding The MemberMemberBinding for which to get a hash code. Returns Type Description Int32 A hash code for the specified MemberMemberBinding. | Improve this Doc View Source GetHashCodeMethodCall(MethodCallExpression) Gets the hash code for the specified MethodCallExpression . Declaration protected virtual int GetHashCodeMethodCall(MethodCallExpression node) Parameters Type Name Description MethodCallExpression node The MethodCallExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified MethodCallExpression . | Improve this Doc View Source GetHashCodeNew(NewExpression) Gets the hash code for the specified NewExpression . Declaration protected virtual int GetHashCodeNew(NewExpression node) Parameters Type Name Description NewExpression node The NewExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified NewExpression . | Improve this Doc View Source GetHashCodeNewArray(NewArrayExpression) Gets the hash code for the specified NewArrayExpression . Declaration protected virtual int GetHashCodeNewArray(NewArrayExpression node) Parameters Type Name Description NewArrayExpression node The NewArrayExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified NewArrayExpression . | Improve this Doc View Source GetHashCodeParameter(ParameterExpression) Gets the hash code for the specified ParameterExpression . Declaration protected virtual int GetHashCodeParameter(ParameterExpression node) Parameters Type Name Description ParameterExpression node The ParameterExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified ParameterExpression . | Improve this Doc View Source GetHashCodeRuntimeVariables(RuntimeVariablesExpression) Gets the hash code for the specified RuntimeVariablesExpression . Declaration protected virtual int GetHashCodeRuntimeVariables(RuntimeVariablesExpression node) Parameters Type Name Description RuntimeVariablesExpression node The RuntimeVariablesExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified RuntimeVariablesExpression . | Improve this Doc View Source GetHashCodeSwitch(SwitchExpression) Gets the hash code for the specified SwitchExpression . Declaration protected virtual int GetHashCodeSwitch(SwitchExpression node) Parameters Type Name Description SwitchExpression node The SwitchExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified SwitchExpression . | Improve this Doc View Source GetHashCodeSwitchCase(SwitchCase) Gets the hash code for the specified SwitchCase. Declaration protected virtual int GetHashCodeSwitchCase(SwitchCase switchCase) Parameters Type Name Description SwitchCase switchCase The SwitchCase for which to get a hash code. Returns Type Description Int32 A hash code for the specified SwitchCase. | Improve this Doc View Source GetHashCodeTry(TryExpression) Gets the hash code for the specified TryExpression . Declaration protected virtual int GetHashCodeTry(TryExpression node) Parameters Type Name Description TryExpression node The TryExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified TryExpression . | Improve this Doc View Source GetHashCodeTypeBinary(TypeBinaryExpression) Gets the hash code for the specified TypeBinaryExpression . Declaration protected virtual int GetHashCodeTypeBinary(TypeBinaryExpression node) Parameters Type Name Description TypeBinaryExpression node The TypeBinaryExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified TypeBinaryExpression . | Improve this Doc View Source GetHashCodeUnary(UnaryExpression) Gets the hash code for the specified UnaryExpression . Declaration protected virtual int GetHashCodeUnary(UnaryExpression node) Parameters Type Name Description UnaryExpression node The UnaryExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified UnaryExpression . Explicit Interface Implementations | Improve this Doc View Source IEqualityComparer<BinaryExpression>.Equals(BinaryExpression, BinaryExpression) Determines whether the specified BinaryExpression s are equal. Declaration bool IEqualityComparer<BinaryExpression>.Equals(BinaryExpression x, BinaryExpression y) Parameters Type Name Description BinaryExpression x The first BinaryExpression to compare. BinaryExpression y The second BinaryExpression to compare. Returns Type Description Boolean true if the specified BinaryExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<BinaryExpression>.GetHashCode(BinaryExpression) Returns a hash code for the specified BinaryExpression . Declaration int IEqualityComparer<BinaryExpression>.GetHashCode(BinaryExpression obj) Parameters Type Name Description BinaryExpression obj The BinaryExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified BinaryExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<BlockExpression>.Equals(BlockExpression, BlockExpression) Determines whether the specified BlockExpression are equal. Declaration bool IEqualityComparer<BlockExpression>.Equals(BlockExpression x, BlockExpression y) Parameters Type Name Description BlockExpression x The first BlockExpression to compare. BlockExpression y The second BlockExpression to compare. Returns Type Description Boolean true if the specified BlockExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<BlockExpression>.GetHashCode(BlockExpression) Returns a hash code for the specified BlockExpression . Declaration int IEqualityComparer<BlockExpression>.GetHashCode(BlockExpression obj) Parameters Type Name Description BlockExpression obj The BlockExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified BlockExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<ConditionalExpression>.Equals(ConditionalExpression, ConditionalExpression) Determines whether the specified ConditionalExpression s are equal. Declaration bool IEqualityComparer<ConditionalExpression>.Equals(ConditionalExpression x, ConditionalExpression y) Parameters Type Name Description ConditionalExpression x The first ConditionalExpression to compare. ConditionalExpression y The second ConditionalExpression to compare. Returns Type Description Boolean true if the specified ConditionalExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<ConditionalExpression>.GetHashCode(ConditionalExpression) Returns a hash code for the specified ConditionalExpression . Declaration int IEqualityComparer<ConditionalExpression>.GetHashCode(ConditionalExpression obj) Parameters Type Name Description ConditionalExpression obj The ConditionalExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified ConditionalExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<ConstantExpression>.Equals(ConstantExpression, ConstantExpression) Determines whether the specified ConstantExpression s are equal. Declaration bool IEqualityComparer<ConstantExpression>.Equals(ConstantExpression x, ConstantExpression y) Parameters Type Name Description ConstantExpression x The first ConstantExpression to compare. ConstantExpression y The second ConstantExpression to compare. Returns Type Description Boolean true if the specified ConstantExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<ConstantExpression>.GetHashCode(ConstantExpression) Returns a hash code for the specified ConstantExpression . Declaration int IEqualityComparer<ConstantExpression>.GetHashCode(ConstantExpression obj) Parameters Type Name Description ConstantExpression obj The ConstantExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified ConstantExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<DebugInfoExpression>.Equals(DebugInfoExpression, DebugInfoExpression) Determines whether the specified DebugInfoExpression s are equal. Declaration bool IEqualityComparer<DebugInfoExpression>.Equals(DebugInfoExpression x, DebugInfoExpression y) Parameters Type Name Description DebugInfoExpression x The first DebugInfoExpression to compare. DebugInfoExpression y The second DebugInfoExpression to compare. Returns Type Description Boolean true if the specified DebugInfoExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<DebugInfoExpression>.GetHashCode(DebugInfoExpression) Returns a hash code for the specified DebugInfoExpression . Declaration int IEqualityComparer<DebugInfoExpression>.GetHashCode(DebugInfoExpression obj) Parameters Type Name Description DebugInfoExpression obj The DebugInfoExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified DebugInfoExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<DefaultExpression>.Equals(DefaultExpression, DefaultExpression) Determines whether the specified DefaultExpression s are equal. Declaration bool IEqualityComparer<DefaultExpression>.Equals(DefaultExpression x, DefaultExpression y) Parameters Type Name Description DefaultExpression x The first DefaultExpression to compare. DefaultExpression y The second DefaultExpression to compare. Returns Type Description Boolean true if the specified DefaultExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<DefaultExpression>.GetHashCode(DefaultExpression) Returns a hash code for the specified DefaultExpression . Declaration int IEqualityComparer<DefaultExpression>.GetHashCode(DefaultExpression obj) Parameters Type Name Description DefaultExpression obj The DefaultExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified DefaultExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<DynamicExpression>.Equals(DynamicExpression, DynamicExpression) Determines whether the specified DynamicExpression s are equal. Declaration bool IEqualityComparer<DynamicExpression>.Equals(DynamicExpression x, DynamicExpression y) Parameters Type Name Description DynamicExpression x The first DynamicExpression to compare. DynamicExpression y The second DynamicExpression to compare. Returns Type Description Boolean true if the specified DynamicExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<DynamicExpression>.GetHashCode(DynamicExpression) Returns a hash code for the specified DynamicExpression . Declaration int IEqualityComparer<DynamicExpression>.GetHashCode(DynamicExpression obj) Parameters Type Name Description DynamicExpression obj The DynamicExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified DynamicExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<Expression>.Equals(Expression, Expression) Determines whether two Expression s are equal. Declaration bool IEqualityComparer<Expression>.Equals(Expression x, Expression y) Parameters Type Name Description Expression x The first Expression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<Expression>.GetHashCode(Expression) Serves as a hash function for the specified Expression for hashing algorithms and data structures, such as a hash table. Declaration int IEqualityComparer<Expression>.GetHashCode(Expression obj) Parameters Type Name Description Expression obj The Expression for which to get a hash code. Returns Type Description Int32 A hash code for the specified Expression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<GotoExpression>.Equals(GotoExpression, GotoExpression) Determines whether the specified GotoExpression s are equal. Declaration bool IEqualityComparer<GotoExpression>.Equals(GotoExpression x, GotoExpression y) Parameters Type Name Description GotoExpression x The first GotoExpression to compare. GotoExpression y The second GotoExpression to compare. Returns Type Description Boolean true if the specified GotoExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<GotoExpression>.GetHashCode(GotoExpression) Returns a hash code for the specified GotoExpression . Declaration int IEqualityComparer<GotoExpression>.GetHashCode(GotoExpression obj) Parameters Type Name Description GotoExpression obj The GotoExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified GotoExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<IndexExpression>.Equals(IndexExpression, IndexExpression) Determines whether the specified IndexExpression s are equal. Declaration bool IEqualityComparer<IndexExpression>.Equals(IndexExpression x, IndexExpression y) Parameters Type Name Description IndexExpression x The first IndexExpression to compare. IndexExpression y The second IndexExpression to compare. Returns Type Description Boolean true if the specified IndexExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<IndexExpression>.GetHashCode(IndexExpression) Returns a hash code for the specified IndexExpression . Declaration int IEqualityComparer<IndexExpression>.GetHashCode(IndexExpression obj) Parameters Type Name Description IndexExpression obj The IndexExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified IndexExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<InvocationExpression>.Equals(InvocationExpression, InvocationExpression) Determines whether the specified InvocationExpression s are equal. Declaration bool IEqualityComparer<InvocationExpression>.Equals(InvocationExpression x, InvocationExpression y) Parameters Type Name Description InvocationExpression x The first InvocationExpression to compare. InvocationExpression y The second InvocationExpression to compare. Returns Type Description Boolean true if the specified InvocationExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<InvocationExpression>.GetHashCode(InvocationExpression) Returns a hash code for the specified InvocationExpression . Declaration int IEqualityComparer<InvocationExpression>.GetHashCode(InvocationExpression obj) Parameters Type Name Description InvocationExpression obj The InvocationExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified InvocationExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<LabelExpression>.Equals(LabelExpression, LabelExpression) Determines whether the specified LabelExpression s are equal. Declaration bool IEqualityComparer<LabelExpression>.Equals(LabelExpression x, LabelExpression y) Parameters Type Name Description LabelExpression x The first LabelExpression to compare. LabelExpression y The second LabelExpression to compare. Returns Type Description Boolean true if the specified LabelExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<LabelExpression>.GetHashCode(LabelExpression) Returns a hash code for the specified LabelExpression . Declaration int IEqualityComparer<LabelExpression>.GetHashCode(LabelExpression obj) Parameters Type Name Description LabelExpression obj The LabelExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified LabelExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<LambdaExpression>.Equals(LambdaExpression, LambdaExpression) Determines whether the specified LambdaExpression s are equal. Declaration bool IEqualityComparer<LambdaExpression>.Equals(LambdaExpression x, LambdaExpression y) Parameters Type Name Description LambdaExpression x The first LambdaExpression to compare. LambdaExpression y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<LambdaExpression>.GetHashCode(LambdaExpression) Returns a hash code for the specified LambdaExpression . Declaration int IEqualityComparer<LambdaExpression>.GetHashCode(LambdaExpression obj) Parameters Type Name Description LambdaExpression obj The LambdaExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified LambdaExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<ListInitExpression>.Equals(ListInitExpression, ListInitExpression) Determines whether the specified ListInitExpression s are equal. Declaration bool IEqualityComparer<ListInitExpression>.Equals(ListInitExpression x, ListInitExpression y) Parameters Type Name Description ListInitExpression x The first ListInitExpression to compare. ListInitExpression y The second ListInitExpression to compare. Returns Type Description Boolean true if the specified ListInitExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<ListInitExpression>.GetHashCode(ListInitExpression) Returns a hash code for the specified ListInitExpression . Declaration int IEqualityComparer<ListInitExpression>.GetHashCode(ListInitExpression obj) Parameters Type Name Description ListInitExpression obj The ListInitExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified ListInitExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<LoopExpression>.Equals(LoopExpression, LoopExpression) Determines whether the specified LoopExpression s are equal. Declaration bool IEqualityComparer<LoopExpression>.Equals(LoopExpression x, LoopExpression y) Parameters Type Name Description LoopExpression x The first LoopExpression to compare. LoopExpression y The second LoopExpression to compare. Returns Type Description Boolean true if the specified LoopExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<LoopExpression>.GetHashCode(LoopExpression) Returns a hash code for the specified LoopExpression . Declaration int IEqualityComparer<LoopExpression>.GetHashCode(LoopExpression obj) Parameters Type Name Description LoopExpression obj The LoopExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified LoopExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<MemberExpression>.Equals(MemberExpression, MemberExpression) Determines whether the specified MemberExpression s are equal. Declaration bool IEqualityComparer<MemberExpression>.Equals(MemberExpression x, MemberExpression y) Parameters Type Name Description MemberExpression x The first MemberExpression to compare. MemberExpression y The second MemberExpression to compare. Returns Type Description Boolean true if the specified MemberExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<MemberExpression>.GetHashCode(MemberExpression) Returns a hash code for the specified MemberExpression . Declaration int IEqualityComparer<MemberExpression>.GetHashCode(MemberExpression obj) Parameters Type Name Description MemberExpression obj The MemberExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified MemberExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<MemberInitExpression>.Equals(MemberInitExpression, MemberInitExpression) Determines whether the specified MemberInitExpression s are equal. Declaration bool IEqualityComparer<MemberInitExpression>.Equals(MemberInitExpression x, MemberInitExpression y) Parameters Type Name Description MemberInitExpression x The first MemberInitExpression to compare. MemberInitExpression y The second MemberInitExpression to compare. Returns Type Description Boolean true if the specified MemberInitExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<MemberInitExpression>.GetHashCode(MemberInitExpression) Returns a hash code for the specified MemberInitExpression . Declaration int IEqualityComparer<MemberInitExpression>.GetHashCode(MemberInitExpression obj) Parameters Type Name Description MemberInitExpression obj The MemberInitExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified MemberInitExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<MethodCallExpression>.Equals(MethodCallExpression, MethodCallExpression) Determines whether the specified MethodCallExpression s are equal. Declaration bool IEqualityComparer<MethodCallExpression>.Equals(MethodCallExpression x, MethodCallExpression y) Parameters Type Name Description MethodCallExpression x The first MethodCallExpression to compare. MethodCallExpression y The second MethodCallExpression to compare. Returns Type Description Boolean true if the specified MethodCallExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<MethodCallExpression>.GetHashCode(MethodCallExpression) Returns a hash code for the specified MethodCallExpression . Declaration int IEqualityComparer<MethodCallExpression>.GetHashCode(MethodCallExpression obj) Parameters Type Name Description MethodCallExpression obj The MethodCallExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified MethodCallExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<NewArrayExpression>.Equals(NewArrayExpression, NewArrayExpression) Determines whether the specified NewArrayExpression s are equal. Declaration bool IEqualityComparer<NewArrayExpression>.Equals(NewArrayExpression x, NewArrayExpression y) Parameters Type Name Description NewArrayExpression x The first NewArrayExpression to compare. NewArrayExpression y The second NewArrayExpression to compare. Returns Type Description Boolean true if the specified NewArrayExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<NewArrayExpression>.GetHashCode(NewArrayExpression) Returns a hash code for the specified NewArrayExpression . Declaration int IEqualityComparer<NewArrayExpression>.GetHashCode(NewArrayExpression obj) Parameters Type Name Description NewArrayExpression obj The NewArrayExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified NewArrayExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<NewExpression>.Equals(NewExpression, NewExpression) Determines whether the specified NewExpression s are equal. Declaration bool IEqualityComparer<NewExpression>.Equals(NewExpression x, NewExpression y) Parameters Type Name Description NewExpression x The first NewExpression to compare. NewExpression y The second NewExpression to compare. Returns Type Description Boolean true if the specified NewExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<NewExpression>.GetHashCode(NewExpression) Returns a hash code for the specified NewExpression . Declaration int IEqualityComparer<NewExpression>.GetHashCode(NewExpression obj) Parameters Type Name Description NewExpression obj The NewExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified NewExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<ParameterExpression>.Equals(ParameterExpression, ParameterExpression) Determines whether the specified ParameterExpression s are equal. Declaration bool IEqualityComparer<ParameterExpression>.Equals(ParameterExpression x, ParameterExpression y) Parameters Type Name Description ParameterExpression x The first ParameterExpression to compare. ParameterExpression y The second ParameterExpression to compare. Returns Type Description Boolean true if the specified ParameterExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<ParameterExpression>.GetHashCode(ParameterExpression) Returns a hash code for the specified ParameterExpression . Declaration int IEqualityComparer<ParameterExpression>.GetHashCode(ParameterExpression obj) Parameters Type Name Description ParameterExpression obj The ParameterExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified ParameterExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<RuntimeVariablesExpression>.Equals(RuntimeVariablesExpression, RuntimeVariablesExpression) Determines whether the specified RuntimeVariablesExpression s are equal. Declaration bool IEqualityComparer<RuntimeVariablesExpression>.Equals(RuntimeVariablesExpression x, RuntimeVariablesExpression y) Parameters Type Name Description RuntimeVariablesExpression x The first RuntimeVariablesExpression to compare. RuntimeVariablesExpression y The second RuntimeVariablesExpression to compare. Returns Type Description Boolean true if the specified RuntimeVariablesExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<RuntimeVariablesExpression>.GetHashCode(RuntimeVariablesExpression) Returns a hash code for the specified RuntimeVariablesExpression . Declaration int IEqualityComparer<RuntimeVariablesExpression>.GetHashCode(RuntimeVariablesExpression obj) Parameters Type Name Description RuntimeVariablesExpression obj The RuntimeVariablesExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified RuntimeVariablesExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<SwitchExpression>.Equals(SwitchExpression, SwitchExpression) Determines whether the specified SwitchExpression s are equal. Declaration bool IEqualityComparer<SwitchExpression>.Equals(SwitchExpression x, SwitchExpression y) Parameters Type Name Description SwitchExpression x The first SwitchExpression to compare. SwitchExpression y The second SwitchExpression to compare. Returns Type Description Boolean true if the specified SwitchExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<SwitchExpression>.GetHashCode(SwitchExpression) Returns a hash code for the specified SwitchExpression . Declaration int IEqualityComparer<SwitchExpression>.GetHashCode(SwitchExpression obj) Parameters Type Name Description SwitchExpression obj The SwitchExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified SwitchExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<TryExpression>.Equals(TryExpression, TryExpression) Determines whether the specified TryExpression s are equal. Declaration bool IEqualityComparer<TryExpression>.Equals(TryExpression x, TryExpression y) Parameters Type Name Description TryExpression x The first TryExpression to compare. TryExpression y The second TryExpression to compare. Returns Type Description Boolean true if the specified TryExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<TryExpression>.GetHashCode(TryExpression) Returns a hash code for the specified TryExpression . Declaration int IEqualityComparer<TryExpression>.GetHashCode(TryExpression obj) Parameters Type Name Description TryExpression obj The TryExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified TryExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<TypeBinaryExpression>.Equals(TypeBinaryExpression, TypeBinaryExpression) Determines whether the specified TypeBinaryExpression s are equal. Declaration bool IEqualityComparer<TypeBinaryExpression>.Equals(TypeBinaryExpression x, TypeBinaryExpression y) Parameters Type Name Description TypeBinaryExpression x The first TypeBinaryExpression to compare. TypeBinaryExpression y The second TypeBinaryExpression to compare. Returns Type Description Boolean true if the specified TypeBinaryExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<TypeBinaryExpression>.GetHashCode(TypeBinaryExpression) Returns a hash code for the specified TypeBinaryExpression . Declaration int IEqualityComparer<TypeBinaryExpression>.GetHashCode(TypeBinaryExpression obj) Parameters Type Name Description TypeBinaryExpression obj The TypeBinaryExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified TypeBinaryExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer<UnaryExpression>.Equals(UnaryExpression, UnaryExpression) Determines whether the specified UnaryExpression s are equal. Declaration bool IEqualityComparer<UnaryExpression>.Equals(UnaryExpression x, UnaryExpression y) Parameters Type Name Description UnaryExpression x The first UnaryExpression to compare. UnaryExpression y The second UnaryExpression to compare. Returns Type Description Boolean true if the specified UnaryExpression s are equal; otherwise, false. | Improve this Doc View Source IEqualityComparer<UnaryExpression>.GetHashCode(UnaryExpression) Returns a hash code for the specified UnaryExpression . Declaration int IEqualityComparer<UnaryExpression>.GetHashCode(UnaryExpression obj) Parameters Type Name Description UnaryExpression obj The UnaryExpression for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified UnaryExpression . Exceptions Type Condition ArgumentNullException The obj is null. | Improve this Doc View Source IEqualityComparer.Equals(Object, Object) Determines whether two Expression s are equal. Declaration bool IEqualityComparer.Equals(object x, object y) Parameters Type Name Description Object x The first Expression to compare. Object y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Exceptions Type Condition ArgumentException x or y is of a type that cannot be cast to Expression . | Improve this Doc View Source IEqualityComparer.GetHashCode(Object) Serves as a hash function for the specified Expression for hashing algorithms and data structures, such as a hash table. Declaration int IEqualityComparer.GetHashCode(object obj) Parameters Type Name Description Object obj The Expression for which to get a hash code. Returns Type Description Int32 A hash code for the specified Expression . Exceptions Type Condition ArgumentNullException The obj is null. ArgumentException obj is of a type that cannot be cast to Expression Implements System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.IEqualityComparer System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> System.Collections.Generic.IEqualityComparer<T> Extension Methods ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6>>, Expression<Action<T1, T2, T3, T4, T5, T6>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5>>, Expression<Action<T1, T2, T3, T4, T5>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4>>, Expression<Action<T1, T2, T3, T4>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3>>, Expression<Action<T1, T2, T3>>) ExpressionEqualityComparerExtensions.Equals<T1, T2>(IEqualityComparer<Expression>, Expression<Action<T1, T2>>, Expression<Action<T1, T2>>) ExpressionEqualityComparerExtensions.Equals<T1>(IEqualityComparer<Expression>, Expression<Action<T1>>, Expression<Action<T1>>) ExpressionEqualityComparerExtensions.Equals(IEqualityComparer<Expression>, Expression<Action>, Expression<Action>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2>(IEqualityComparer<Expression>, Expression<Action<T1, T2>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1>(IEqualityComparer<Expression>, Expression<Action<T1>>, Expression) ExpressionEqualityComparerExtensions.Equals(IEqualityComparer<Expression>, Expression<Action>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3>>) ExpressionEqualityComparerExtensions.Equals<T1, T2>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2>>) ExpressionEqualityComparerExtensions.Equals<T1>(IEqualityComparer<Expression>, Expression, Expression<Action<T1>>) ExpressionEqualityComparerExtensions.Equals(IEqualityComparer<Expression>, Expression, Expression<Action>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, TResult>>, Expression<Func<T1, T2, T3, T4, T5, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, TResult>>, Expression<Func<T1, T2, T3, T4, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, TResult>>, Expression<Func<T1, T2, T3, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, TResult>>, Expression<Func<T1, T2, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, TResult>>, Expression<Func<T1, TResult>>) ExpressionEqualityComparerExtensions.Equals<TResult>(IEqualityComparer<Expression>, Expression<Func<TResult>>, Expression<Func<TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<TResult>(IEqualityComparer<Expression>, Expression<Func<TResult>>, Expression) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, T7, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, T6, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, T5, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, T4, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, T3, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, T2, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, TResult>>) ExpressionEqualityComparerExtensions.Equals<T1, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, TResult>>) ExpressionEqualityComparerExtensions.Equals<TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2>(IEqualityComparer<Expression>, Expression<Action<T1, T2>>) ExpressionEqualityComparerExtensions.GetHashCode<T1>(IEqualityComparer<Expression>, Expression<Action<T1>>) ExpressionEqualityComparerExtensions.GetHashCode(IEqualityComparer<Expression>, Expression<Action>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, T7, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, T6, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, T5, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, T4, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, T3, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, T2, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<T1, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, TResult>>) ExpressionEqualityComparerExtensions.GetHashCode<TResult>(IEqualityComparer<Expression>, Expression<Func<TResult>>)"
  },
  "lib/ExpressionTreeToolkit.ExpressionEqualityComparerExtensions.html": {
    "href": "lib/ExpressionTreeToolkit.ExpressionEqualityComparerExtensions.html",
    "title": "Class ExpressionEqualityComparerExtensions | Expression Tree Toolkit Documentation",
    "keywords": "Class ExpressionEqualityComparerExtensions Extension methods to make working with ExpressionEqualityComparer easier. Inheritance Object ExpressionEqualityComparerExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ExpressionTreeToolkit Assembly : ExpressionTreeToolkit.Core.dll Syntax public static class ExpressionEqualityComparerExtensions Methods | Improve this Doc View Source Equals(IEqualityComparer<Expression>, Expression, Expression<Action>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals(this IEqualityComparer<Expression> target, Expression x, Expression<Action> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action > y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. | Improve this Doc View Source Equals(IEqualityComparer<Expression>, Expression<Action>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals(this IEqualityComparer<Expression> target, Expression<Action> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action > x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. | Improve this Doc View Source Equals(IEqualityComparer<Expression>, Expression<Action>, Expression<Action>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals(this IEqualityComparer<Expression> target, Expression<Action> x, Expression<Action> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action > x The first LambdaExpression to compare. Expression < Action > y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. | Improve this Doc View Source Equals<T1>(IEqualityComparer<Expression>, Expression, Expression<Action<T1>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1>(IEqualityComparer<Expression>, Expression<Action<T1>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1>(this IEqualityComparer<Expression> target, Expression<Action<T1>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1>(IEqualityComparer<Expression>, Expression<Action<T1>>, Expression<Action<T1>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1>(this IEqualityComparer<Expression> target, Expression<Action<T1>> x, Expression<Action<T1>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1>> x The first LambdaExpression to compare. Expression < Action <T1>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<TResult>(IEqualityComparer<Expression>, Expression<Func<TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<TResult>(this IEqualityComparer<Expression> target, Expression<Func<TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<TResult>(IEqualityComparer<Expression>, Expression<Func<TResult>>, Expression<Func<TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<TResult>(this IEqualityComparer<Expression> target, Expression<Func<TResult>> x, Expression<Func<TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <TResult>> x The first LambdaExpression to compare. Expression < Func <TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> x The first LambdaExpression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> x The first LambdaExpression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> x The first LambdaExpression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> x The first LambdaExpression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> x The first LambdaExpression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> x The first LambdaExpression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. T16 The type of the sixteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. T16 The type of the sixteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> x The first LambdaExpression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. T16 The type of the sixteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>> x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. T16 The type of the sixteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. T16 The type of the sixteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. T16 The type of the sixteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1, T2>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1, T2>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2>(IEqualityComparer<Expression>, Expression<Action<T1, T2>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1, T2>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2>(IEqualityComparer<Expression>, Expression<Action<T1, T2>>, Expression<Action<T1, T2>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2>> x, Expression<Action<T1, T2>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1, T2>> x The first LambdaExpression to compare. Expression < Action <T1, T2>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, TResult>>, Expression<Func<T1, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, TResult>> x, Expression<Func<T1, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1, T2, T3>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1, T2, T3>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, T2, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, T2, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1, T2, T3>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3>>, Expression<Action<T1, T2, T3>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3>> x, Expression<Action<T1, T2, T3>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1, T2, T3>> x The first LambdaExpression to compare. Expression < Action <T1, T2, T3>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, T2, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, TResult>>, Expression<Func<T1, T2, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, TResult>> x, Expression<Func<T1, T2, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, T2, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, T2, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1, T2, T3, T4>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1, T2, T3, T4>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, T2, T3, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, T2, T3, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1, T2, T3, T4>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4>>, Expression<Action<T1, T2, T3, T4>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4>> x, Expression<Action<T1, T2, T3, T4>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1, T2, T3, T4>> x The first LambdaExpression to compare. Expression < Action <T1, T2, T3, T4>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, T2, T3, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, TResult>>, Expression<Func<T1, T2, T3, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, TResult>> x, Expression<Func<T1, T2, T3, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, T2, T3, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, T2, T3, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1, T2, T3, T4, T5>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1, T2, T3, T4, T5>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, T2, T3, T4, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, T2, T3, T4, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1, T2, T3, T4, T5>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5>>, Expression<Action<T1, T2, T3, T4, T5>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5>> x, Expression<Action<T1, T2, T3, T4, T5>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1, T2, T3, T4, T5>> x The first LambdaExpression to compare. Expression < Action <T1, T2, T3, T4, T5>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, T2, T3, T4, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, TResult>>, Expression<Func<T1, T2, T3, T4, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, TResult>> x, Expression<Func<T1, T2, T3, T4, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, T2, T3, T4, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, T2, T3, T4, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1, T2, T3, T4, T5, T6>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1, T2, T3, T4, T5, T6>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, T2, T3, T4, T5, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, T2, T3, T4, T5, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1, T2, T3, T4, T5, T6>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6>>, Expression<Action<T1, T2, T3, T4, T5, T6>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6>> x, Expression<Action<T1, T2, T3, T4, T5, T6>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1, T2, T3, T4, T5, T6>> x The first LambdaExpression to compare. Expression < Action <T1, T2, T3, T4, T5, T6>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, T2, T3, T4, T5, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, TResult>>, Expression<Func<T1, T2, T3, T4, T5, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, TResult>> x, Expression<Func<T1, T2, T3, T4, T5, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, T2, T3, T4, T5, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, T2, T3, T4, T5, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1, T2, T3, T4, T5, T6, T7>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, T2, T3, T4, T5, T6, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1, T2, T3, T4, T5, T6, T7>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7>> x, Expression<Action<T1, T2, T3, T4, T5, T6, T7>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1, T2, T3, T4, T5, T6, T7>> x The first LambdaExpression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, T2, T3, T4, T5, T6, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, TResult>> x, Expression<Func<T1, T2, T3, T4, T5, T6, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, T2, T3, T4, T5, T6, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>> x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8>> x The first LambdaExpression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEqualityComparer<Expression>, Expression, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this IEqualityComparer<Expression> target, Expression x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEqualityComparer<Expression>, Expression, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>) Determines whether one Expression and one LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this IEqualityComparer<Expression> target, Expression x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression x The first Expression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>> x, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9>> x The first LambdaExpression to compare. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>, Expression) Determines whether one LambdaExpression and one Expression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>> x, Expression y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two Expression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult>> x The first LambdaExpression to compare. Expression y The second Expression to compare. Returns Type Description Boolean true if the specified Expression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source Equals<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>) Determines whether two LambdaExpression are equal. Declaration public static bool Equals<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>> x, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>> y) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to compare the two LambdaExpression . Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult>> x The first LambdaExpression to compare. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult>> y The second LambdaExpression to compare. Returns Type Description Boolean true if the specified LambdaExpression s are equal; otherwise, false. Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode(IEqualityComparer<Expression>, Expression<Action>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode(this IEqualityComparer<Expression> target, Expression<Action> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action > obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . | Improve this Doc View Source GetHashCode<T1>(IEqualityComparer<Expression>, Expression<Action<T1>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1>(this IEqualityComparer<Expression> target, Expression<Action<T1>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<TResult>(IEqualityComparer<Expression>, Expression<Func<TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<TResult>(this IEqualityComparer<Expression> target, Expression<Func<TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. T16 The type of the sixteenth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. T10 The type of the tenth parameter of the method that this LambdaExpression encapsulates. T11 The type of the eleventh parameter of the method that this LambdaExpression encapsulates. T12 The type of the twelfth parameter of the method that this LambdaExpression encapsulates. T13 The type of the thirteenth parameter of the method that this LambdaExpression encapsulates. T14 The type of the fourteenth parameter of the method that this LambdaExpression encapsulates. T15 The type of the fifteenth parameter of the method that this LambdaExpression encapsulates. T16 The type of the sixteenth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2>(IEqualityComparer<Expression>, Expression<Action<T1, T2>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1, T2>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1, T2, T3>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, T2, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1, T2, T3, T4>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, T2, T3, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1, T2, T3, T4, T5>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, T2, T3, T4, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1, T2, T3, T4, T5, T6>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, T2, T3, T4, T5, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1, T2, T3, T4, T5, T6, T7>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, T2, T3, T4, T5, T6, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, T2, T3, T4, T5, T6, T7, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEqualityComparer<Expression>, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this IEqualityComparer<Expression> target, Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. T9 The type of the ninth parameter of the method that this LambdaExpression encapsulates. | Improve this Doc View Source GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEqualityComparer<Expression>, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>) Serves as a hash function for the specified LambdaExpression for hashing algorithms and data structures, such as a hash table. Declaration public static int GetHashCode<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this IEqualityComparer<Expression> target, Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>> obj) Parameters Type Name Description IEqualityComparer < Expression > target An IEqualityComparer < Expression > used to serve the hash function. Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult>> obj The LambdaExpression for which to get a hash code. Returns Type Description Int32 A hash code for the specified LambdaExpression . Type Parameters Name Description T1 The type of the first parameter of the method that this LambdaExpression encapsulates. T2 The type of the second parameter of the method that this LambdaExpression encapsulates. T3 The type of the third parameter of the method that this LambdaExpression encapsulates. T4 The type of the fourth parameter of the method that this LambdaExpression encapsulates. T5 The type of the fifth parameter of the method that this LambdaExpression encapsulates. T6 The type of the sixth parameter of the method that this LambdaExpression encapsulates. T7 The type of the seventh parameter of the method that this LambdaExpression encapsulates. T8 The type of the eighth parameter of the method that this LambdaExpression encapsulates. TResult The type of the return value of the method that this LambdaExpression encapsulates."
  },
  "lib/ExpressionTreeToolkit.ExpressionExtensions.html": {
    "href": "lib/ExpressionTreeToolkit.ExpressionExtensions.html",
    "title": "Class ExpressionExtensions | Expression Tree Toolkit Documentation",
    "keywords": "Class ExpressionExtensions Extension methods to make working with Expression easier. Inheritance Object ExpressionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ExpressionTreeToolkit Assembly : ExpressionTreeToolkit.Core.dll Syntax public static class ExpressionExtensions Methods | Improve this Doc View Source AsEnumerable(Expression) Returns an IEnumerable < Expression >. This object can be used in a LINQ expression or method query. Declaration public static IEnumerable<Expression> AsEnumerable(this Expression source) Parameters Type Name Description Expression source The source Expression to make enumerable. Returns Type Description IEnumerable < Expression > An IEnumerable < Expression > object. Exceptions Type Condition ArgumentNullException The source Expression is null."
  },
  "lib/ExpressionTreeToolkit.ExpressionIterator.html": {
    "href": "lib/ExpressionTreeToolkit.ExpressionIterator.html",
    "title": "Class ExpressionIterator | Expression Tree Toolkit Documentation",
    "keywords": "Class ExpressionIterator Generate enumerators for Expression tree. Inheritance Object ExpressionIterator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ExpressionTreeToolkit Assembly : ExpressionTreeToolkit.Core.dll Syntax public class ExpressionIterator Constructors | Improve this Doc View Source ExpressionIterator() Default constructor Declaration protected ExpressionIterator() Methods | Improve this Doc View Source BinaryIterator(BinaryExpression) Returns an enumerator that iterates through the BinaryExpression . Declaration protected virtual IEnumerable<Expression> BinaryIterator(BinaryExpression expression) Parameters Type Name Description BinaryExpression expression The BinaryExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the BinaryExpression . Exceptions Type Condition ArgumentNullException The BinaryExpression is null. | Improve this Doc View Source BlockIterator(BlockExpression) Returns an enumerator that iterates through the BlockExpression . Declaration protected virtual IEnumerable<Expression> BlockIterator(BlockExpression expression) Parameters Type Name Description BlockExpression expression The BlockExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the BlockExpression . Exceptions Type Condition ArgumentNullException The BlockExpression is null. | Improve this Doc View Source CatchBlockIterator(CatchBlock) Returns an enumerator that iterates through the CatchBlock. Declaration protected virtual IEnumerable<Expression> CatchBlockIterator(CatchBlock catchBlock) Parameters Type Name Description CatchBlock catchBlock The CatchBlock to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the CatchBlock. Exceptions Type Condition ArgumentNullException The CatchBlock is null. | Improve this Doc View Source ConditionalIterator(ConditionalExpression) Returns an enumerator that iterates through the ConditionalExpression . Declaration protected virtual IEnumerable<Expression> ConditionalIterator(ConditionalExpression expression) Parameters Type Name Description ConditionalExpression expression The ConditionalExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the ConditionalExpression . Exceptions Type Condition ArgumentNullException The ConditionalExpression is null. | Improve this Doc View Source ConstantIterator(ConstantExpression) Returns an enumerator that iterates through the ConstantExpression . Declaration protected virtual IEnumerable<Expression> ConstantIterator(ConstantExpression expression) Parameters Type Name Description ConstantExpression expression The ConstantExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the ConstantExpression . Exceptions Type Condition ArgumentNullException The ConstantExpression is null. | Improve this Doc View Source DebugInfoIterator(DebugInfoExpression) Returns an enumerator that iterates through the DebugInfoExpression . Declaration protected virtual IEnumerable<Expression> DebugInfoIterator(DebugInfoExpression expression) Parameters Type Name Description DebugInfoExpression expression The DebugInfoExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the DebugInfoExpression . Exceptions Type Condition ArgumentNullException The DebugInfoExpression is null. | Improve this Doc View Source DefaultIterator(DefaultExpression) Returns an enumerator that iterates through the DefaultExpression . Declaration protected virtual IEnumerable<Expression> DefaultIterator(DefaultExpression expression) Parameters Type Name Description DefaultExpression expression The DefaultExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the DefaultExpression . Exceptions Type Condition ArgumentNullException The DefaultExpression is null. | Improve this Doc View Source DynamicIterator(DynamicExpression) Returns an enumerator that iterates through the DynamicExpression . Declaration protected virtual IEnumerable<Expression> DynamicIterator(DynamicExpression expression) Parameters Type Name Description DynamicExpression expression The DynamicExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the DynamicExpression . Exceptions Type Condition ArgumentNullException The DynamicExpression is null. | Improve this Doc View Source ElementInitIterator(ElementInit) Returns an enumerator that iterates through the ElementInit. Declaration protected virtual IEnumerable<Expression> ElementInitIterator(ElementInit elementInit) Parameters Type Name Description ElementInit elementInit The ElementInit to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the ElementInit. Exceptions Type Condition ArgumentNullException The ElementInit is null. | Improve this Doc View Source ExtensionIterator(Expression) Returns an enumerator that iterates through the Expression . Declaration protected virtual IEnumerable<Expression> ExtensionIterator(Expression expression) Parameters Type Name Description Expression expression The Expression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the Expression . Exceptions Type Condition ArgumentNullException The Expression is null. | Improve this Doc View Source GotoIterator(GotoExpression) Returns an enumerator that iterates through the GotoExpression . Declaration protected virtual IEnumerable<Expression> GotoIterator(GotoExpression expression) Parameters Type Name Description GotoExpression expression The GotoExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the GotoExpression . Exceptions Type Condition ArgumentNullException The GotoExpression is null. | Improve this Doc View Source IndexIterator(IndexExpression) Returns an enumerator that iterates through the IndexExpression . Declaration protected virtual IEnumerable<Expression> IndexIterator(IndexExpression expression) Parameters Type Name Description IndexExpression expression The IndexExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the IndexExpression . Exceptions Type Condition ArgumentNullException The IndexExpression is null. | Improve this Doc View Source InvocationIterator(InvocationExpression) Returns an enumerator that iterates through the InvocationExpression . Declaration protected virtual IEnumerable<Expression> InvocationIterator(InvocationExpression expression) Parameters Type Name Description InvocationExpression expression The InvocationExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the InvocationExpression . Exceptions Type Condition ArgumentNullException The InvocationExpression is null. | Improve this Doc View Source Iterator(ReadOnlyCollection<Expression>) Returns an enumerator that iterates through the ReadOnlyCollection < Expression > elements. Declaration protected IEnumerable<Expression> Iterator(ReadOnlyCollection<Expression> expressions) Parameters Type Name Description ReadOnlyCollection < Expression > expressions The ReadOnlyCollection < Expression > to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the ReadOnlyCollection < Expression > Exceptions Type Condition ArgumentNullException The ReadOnlyCollection < Expression > is null. | Improve this Doc View Source Iterator(Expression) Returns an enumerator that iterates through the Expression . Declaration public virtual IEnumerable<Expression> Iterator(Expression expression) Parameters Type Name Description Expression expression The Expression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the Expression . Exceptions Type Condition ArgumentNullException The Expression is null. | Improve this Doc View Source Iterator<T>(ReadOnlyCollection<T>, Func<T, IEnumerable<Expression>>) Returns an enumerator that iterates through the ReadOnlyCollection<t> elements using an iterator. Declaration protected IEnumerable<Expression> Iterator<T>(ReadOnlyCollection<T> values, Func<T, IEnumerable<Expression>> iterator) where T : class Parameters Type Name Description ReadOnlyCollection <T> values The ReadOnlyCollection < Expression > to iterate. Func <T, IEnumerable < Expression >> iterator The iterator to apply to each element. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the ReadOnlyCollection < Expression > elements using the iterator. Type Parameters Name Description T The type of the elements of values Exceptions Type Condition ArgumentNullException The ReadOnlyCollection < Expression > is null | Improve this Doc View Source LabelIterator(LabelExpression) Returns an enumerator that iterates through the LabelExpression . Declaration protected virtual IEnumerable<Expression> LabelIterator(LabelExpression expression) Parameters Type Name Description LabelExpression expression The LabelExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the LabelExpression . Exceptions Type Condition ArgumentNullException The LabelExpression is null. | Improve this Doc View Source LambdaIterator(LambdaExpression) Returns an enumerator that iterates through the LambdaExpression . Declaration protected virtual IEnumerable<Expression> LambdaIterator(LambdaExpression expression) Parameters Type Name Description LambdaExpression expression The LambdaExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the LambdaExpression . Exceptions Type Condition ArgumentNullException The LambdaExpression is null. | Improve this Doc View Source ListInitIterator(ListInitExpression) Returns an enumerator that iterates through the ListInitExpression . Declaration protected virtual IEnumerable<Expression> ListInitIterator(ListInitExpression expression) Parameters Type Name Description ListInitExpression expression The ListInitExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the ListInitExpression . Exceptions Type Condition ArgumentNullException The ListInitExpression is null. | Improve this Doc View Source LoopIterator(LoopExpression) Returns an enumerator that iterates through the LoopExpression . Declaration protected virtual IEnumerable<Expression> LoopIterator(LoopExpression expression) Parameters Type Name Description LoopExpression expression The LoopExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the LoopExpression . Exceptions Type Condition ArgumentNullException The LoopExpression is null. | Improve this Doc View Source MemberAssignmentIterator(MemberAssignment) Returns an enumerator that iterates through the MemberAssignment. Declaration protected virtual IEnumerable<Expression> MemberAssignmentIterator(MemberAssignment memberAssignment) Parameters Type Name Description MemberAssignment memberAssignment The MemberAssignment to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the MemberAssignment. Exceptions Type Condition ArgumentNullException The MemberAssignment is null. | Improve this Doc View Source MemberBindingIterator(MemberBinding) Returns an enumerator that iterates through the MemberBinding. Declaration protected virtual IEnumerable<Expression> MemberBindingIterator(MemberBinding memberBinding) Parameters Type Name Description MemberBinding memberBinding The MemberBinding to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the MemberBinding. Exceptions Type Condition ArgumentNullException The MemberBinding is null. | Improve this Doc View Source MemberInitIterator(MemberInitExpression) Returns an enumerator that iterates through the MemberInitExpression . Declaration protected virtual IEnumerable<Expression> MemberInitIterator(MemberInitExpression expression) Parameters Type Name Description MemberInitExpression expression The MemberInitExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the MemberInitExpression . Exceptions Type Condition ArgumentNullException The MemberInitExpression is null. | Improve this Doc View Source MemberIterator(MemberExpression) Returns an enumerator that iterates through the MemberExpression . Declaration protected virtual IEnumerable<Expression> MemberIterator(MemberExpression expression) Parameters Type Name Description MemberExpression expression The MemberExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the MemberExpression . Exceptions Type Condition ArgumentNullException The MemberExpression is null. | Improve this Doc View Source MemberListBindingIterator(MemberListBinding) Returns an enumerator that iterates through the MemberListBinding. Declaration protected virtual IEnumerable<Expression> MemberListBindingIterator(MemberListBinding memberListBinding) Parameters Type Name Description MemberListBinding memberListBinding The MemberListBinding to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the MemberListBinding. Exceptions Type Condition ArgumentNullException The MemberListBinding is null. | Improve this Doc View Source MemberMemberBindingIterator(MemberMemberBinding) Returns an enumerator that iterates through the MemberMemberBinding. Declaration protected virtual IEnumerable<Expression> MemberMemberBindingIterator(MemberMemberBinding memberMemberBinding) Parameters Type Name Description MemberMemberBinding memberMemberBinding The MemberMemberBinding to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the MemberMemberBinding. Exceptions Type Condition ArgumentNullException The MemberMemberBinding is null. | Improve this Doc View Source MethodCallIterator(MethodCallExpression) Returns an enumerator that iterates through the MethodCallExpression . Declaration protected virtual IEnumerable<Expression> MethodCallIterator(MethodCallExpression expression) Parameters Type Name Description MethodCallExpression expression The MethodCallExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the MethodCallExpression . Exceptions Type Condition ArgumentNullException The MethodCallExpression is null. | Improve this Doc View Source NewArrayIterator(NewArrayExpression) Returns an enumerator that iterates through the NewArrayExpression . Declaration protected virtual IEnumerable<Expression> NewArrayIterator(NewArrayExpression expression) Parameters Type Name Description NewArrayExpression expression The NewArrayExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the NewArrayExpression . Exceptions Type Condition ArgumentNullException The NewArrayExpression is null. | Improve this Doc View Source NewIterator(NewExpression) Returns an enumerator that iterates through the NewExpression . Declaration protected virtual IEnumerable<Expression> NewIterator(NewExpression expression) Parameters Type Name Description NewExpression expression The NewExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the NewExpression . Exceptions Type Condition ArgumentNullException The NewExpression is null. | Improve this Doc View Source ParameterIterator(ParameterExpression) Returns an enumerator that iterates through the ParameterExpression . Declaration protected virtual IEnumerable<Expression> ParameterIterator(ParameterExpression expression) Parameters Type Name Description ParameterExpression expression The ParameterExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the ParameterExpression . Exceptions Type Condition ArgumentNullException The ParameterExpression is null. | Improve this Doc View Source RuntimeVariablesIterator(RuntimeVariablesExpression) Returns an enumerator that iterates through the RuntimeVariablesExpression . Declaration protected virtual IEnumerable<Expression> RuntimeVariablesIterator(RuntimeVariablesExpression expression) Parameters Type Name Description RuntimeVariablesExpression expression The RuntimeVariablesExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the RuntimeVariablesExpression . Exceptions Type Condition ArgumentNullException The RuntimeVariablesExpression is null. | Improve this Doc View Source SwitchIterator(SwitchExpression) Returns an enumerator that iterates through the SwitchExpression . Declaration protected virtual IEnumerable<Expression> SwitchIterator(SwitchExpression expression) Parameters Type Name Description SwitchExpression expression The SwitchExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the SwitchExpression . Exceptions Type Condition ArgumentNullException The SwitchExpression is null. | Improve this Doc View Source TryIterator(TryExpression) Returns an enumerator that iterates through the TryExpression . Declaration protected virtual IEnumerable<Expression> TryIterator(TryExpression expression) Parameters Type Name Description TryExpression expression The TryExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the TryExpression . Exceptions Type Condition ArgumentNullException The TryExpression is null. | Improve this Doc View Source TypeBinaryIterator(TypeBinaryExpression) Returns an enumerator that iterates through the TypeBinaryExpression . Declaration protected virtual IEnumerable<Expression> TypeBinaryIterator(TypeBinaryExpression expression) Parameters Type Name Description TypeBinaryExpression expression The TypeBinaryExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the TypeBinaryExpression . Exceptions Type Condition ArgumentNullException The TypeBinaryExpression is null. | Improve this Doc View Source UnaryIterator(UnaryExpression) Returns an enumerator that iterates through the UnaryExpression . Declaration protected virtual IEnumerable<Expression> UnaryIterator(UnaryExpression expression) Parameters Type Name Description UnaryExpression expression The UnaryExpression to iterate. Returns Type Description IEnumerable < Expression > An enumerator that can be used to iterate through the UnaryExpression . Exceptions Type Condition ArgumentNullException The UnaryExpression is null."
  },
  "lib/ExpressionTreeToolkit.html": {
    "href": "lib/ExpressionTreeToolkit.html",
    "title": "Namespace ExpressionTreeToolkit | Expression Tree Toolkit Documentation",
    "keywords": "Namespace ExpressionTreeToolkit Classes ExpressionEqualityComparer Expression Equality Comparer ExpressionEqualityComparer.ComparisonContext Provides contextual information that can be use to verify elements in a global or local scopes. ExpressionEqualityComparerExtensions Extension methods to make working with ExpressionEqualityComparer easier. ExpressionExtensions Extension methods to make working with Expression easier. ExpressionIterator Generate enumerators for Expression tree."
  }
}